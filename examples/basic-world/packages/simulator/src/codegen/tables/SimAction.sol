// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

// Import user types
import { SimTable, ValueType } from "@tenet-utils/src/Types.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("SimAction")));
bytes32 constant SimActionTableId = _tableId;

struct SimActionData {
  bytes4 selector;
  ValueType senderValueType;
  ValueType receiverValueType;
}

library SimAction {
  /** Get the table's key schema */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](2);
    _schema[0] = SchemaType.UINT8;
    _schema[1] = SchemaType.UINT8;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's value schema */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](3);
    _schema[0] = SchemaType.BYTES4;
    _schema[1] = SchemaType.UINT8;
    _schema[2] = SchemaType.UINT8;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's key names */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](2);
    keyNames[0] = "senderTable";
    keyNames[1] = "receiverTable";
  }

  /** Get the table's field names */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](3);
    fieldNames[0] = "selector";
    fieldNames[1] = "senderValueType";
    fieldNames[2] = "receiverValueType";
  }

  /** Register the table's key schema, value schema, key names and value names */
  function register() internal {
    StoreSwitch.registerTable(_tableId, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Register the table's key schema, value schema, key names and value names (using the specified store) */
  function register(IStore _store) internal {
    _store.registerTable(_tableId, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Get selector */
  function getSelector(SimTable senderTable, SimTable receiverTable) internal view returns (bytes4 selector) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(senderTable)));
    _keyTuple[1] = bytes32(uint256(uint8(receiverTable)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0, getValueSchema());
    return (Bytes.slice4(_blob, 0));
  }

  /** Get selector (using the specified store) */
  function getSelector(
    IStore _store,
    SimTable senderTable,
    SimTable receiverTable
  ) internal view returns (bytes4 selector) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(senderTable)));
    _keyTuple[1] = bytes32(uint256(uint8(receiverTable)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0, getValueSchema());
    return (Bytes.slice4(_blob, 0));
  }

  /** Set selector */
  function setSelector(SimTable senderTable, SimTable receiverTable, bytes4 selector) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(senderTable)));
    _keyTuple[1] = bytes32(uint256(uint8(receiverTable)));

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((selector)), getValueSchema());
  }

  /** Set selector (using the specified store) */
  function setSelector(IStore _store, SimTable senderTable, SimTable receiverTable, bytes4 selector) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(senderTable)));
    _keyTuple[1] = bytes32(uint256(uint8(receiverTable)));

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((selector)), getValueSchema());
  }

  /** Get senderValueType */
  function getSenderValueType(
    SimTable senderTable,
    SimTable receiverTable
  ) internal view returns (ValueType senderValueType) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(senderTable)));
    _keyTuple[1] = bytes32(uint256(uint8(receiverTable)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1, getValueSchema());
    return ValueType(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get senderValueType (using the specified store) */
  function getSenderValueType(
    IStore _store,
    SimTable senderTable,
    SimTable receiverTable
  ) internal view returns (ValueType senderValueType) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(senderTable)));
    _keyTuple[1] = bytes32(uint256(uint8(receiverTable)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1, getValueSchema());
    return ValueType(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set senderValueType */
  function setSenderValueType(SimTable senderTable, SimTable receiverTable, ValueType senderValueType) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(senderTable)));
    _keyTuple[1] = bytes32(uint256(uint8(receiverTable)));

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked(uint8(senderValueType)), getValueSchema());
  }

  /** Set senderValueType (using the specified store) */
  function setSenderValueType(
    IStore _store,
    SimTable senderTable,
    SimTable receiverTable,
    ValueType senderValueType
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(senderTable)));
    _keyTuple[1] = bytes32(uint256(uint8(receiverTable)));

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked(uint8(senderValueType)), getValueSchema());
  }

  /** Get receiverValueType */
  function getReceiverValueType(
    SimTable senderTable,
    SimTable receiverTable
  ) internal view returns (ValueType receiverValueType) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(senderTable)));
    _keyTuple[1] = bytes32(uint256(uint8(receiverTable)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2, getValueSchema());
    return ValueType(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get receiverValueType (using the specified store) */
  function getReceiverValueType(
    IStore _store,
    SimTable senderTable,
    SimTable receiverTable
  ) internal view returns (ValueType receiverValueType) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(senderTable)));
    _keyTuple[1] = bytes32(uint256(uint8(receiverTable)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2, getValueSchema());
    return ValueType(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set receiverValueType */
  function setReceiverValueType(SimTable senderTable, SimTable receiverTable, ValueType receiverValueType) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(senderTable)));
    _keyTuple[1] = bytes32(uint256(uint8(receiverTable)));

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked(uint8(receiverValueType)), getValueSchema());
  }

  /** Set receiverValueType (using the specified store) */
  function setReceiverValueType(
    IStore _store,
    SimTable senderTable,
    SimTable receiverTable,
    ValueType receiverValueType
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(senderTable)));
    _keyTuple[1] = bytes32(uint256(uint8(receiverTable)));

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked(uint8(receiverValueType)), getValueSchema());
  }

  /** Get the full data */
  function get(SimTable senderTable, SimTable receiverTable) internal view returns (SimActionData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(senderTable)));
    _keyTuple[1] = bytes32(uint256(uint8(receiverTable)));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getValueSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(
    IStore _store,
    SimTable senderTable,
    SimTable receiverTable
  ) internal view returns (SimActionData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(senderTable)));
    _keyTuple[1] = bytes32(uint256(uint8(receiverTable)));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getValueSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    SimTable senderTable,
    SimTable receiverTable,
    bytes4 selector,
    ValueType senderValueType,
    ValueType receiverValueType
  ) internal {
    bytes memory _data = encode(selector, senderValueType, receiverValueType);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(senderTable)));
    _keyTuple[1] = bytes32(uint256(uint8(receiverTable)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data, getValueSchema());
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    SimTable senderTable,
    SimTable receiverTable,
    bytes4 selector,
    ValueType senderValueType,
    ValueType receiverValueType
  ) internal {
    bytes memory _data = encode(selector, senderValueType, receiverValueType);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(senderTable)));
    _keyTuple[1] = bytes32(uint256(uint8(receiverTable)));

    _store.setRecord(_tableId, _keyTuple, _data, getValueSchema());
  }

  /** Set the full data using the data struct */
  function set(SimTable senderTable, SimTable receiverTable, SimActionData memory _table) internal {
    set(senderTable, receiverTable, _table.selector, _table.senderValueType, _table.receiverValueType);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, SimTable senderTable, SimTable receiverTable, SimActionData memory _table) internal {
    set(_store, senderTable, receiverTable, _table.selector, _table.senderValueType, _table.receiverValueType);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (SimActionData memory _table) {
    _table.selector = (Bytes.slice4(_blob, 0));

    _table.senderValueType = ValueType(uint8(Bytes.slice1(_blob, 4)));

    _table.receiverValueType = ValueType(uint8(Bytes.slice1(_blob, 5)));
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    bytes4 selector,
    ValueType senderValueType,
    ValueType receiverValueType
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(selector, senderValueType, receiverValueType);
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(SimTable senderTable, SimTable receiverTable) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(senderTable)));
    _keyTuple[1] = bytes32(uint256(uint8(receiverTable)));

    return _keyTuple;
  }

  /* Delete all data for given keys */
  function deleteRecord(SimTable senderTable, SimTable receiverTable) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(senderTable)));
    _keyTuple[1] = bytes32(uint256(uint8(receiverTable)));

    StoreSwitch.deleteRecord(_tableId, _keyTuple, getValueSchema());
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, SimTable senderTable, SimTable receiverTable) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint8(senderTable)));
    _keyTuple[1] = bytes32(uint256(uint8(receiverTable)));

    _store.deleteRecord(_tableId, _keyTuple, getValueSchema());
  }
}
