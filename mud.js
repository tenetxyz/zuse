#!/usr/bin/env node
import{d as M,e as u}from"./chunk-3GOC5VHR.js";import Co from"yargs";import{hideBin as ko}from"yargs/helpers";import{rmSync as ie}from"fs";import{homedir as ae}from"os";import ce from"path";import{execa as le}from"execa";var de={command:"devnode",describe:"Start a local Ethereum node for development",builder(e){return e.options({blocktime:{type:"number",default:1,decs:"Interval in which new blocks are produced"}})},async handler({blocktime:e}){console.log("Clearing devnode history");let o=ae();ie(ce.join(o,".foundry","anvil","tmp"),{recursive:!0,force:!0});let t=["-b",String(e),"--block-base-fee-per-gas","0"];console.log(`Running: anvil ${t.join(" ")}`);let n=le("anvil",t,{stdio:["inherit","inherit","inherit"]});process.on("SIGINT",()=>{console.log(`
gracefully shutting down from SIGINT (Crtl-C)`),n.kill(),process.exit()}),await n}},U=de;import{FaucetServiceDefinition as pe}from"@latticexyz/services/faucet";import{createChannel as me,createClient as fe}from"nice-grpc-web";import P from"chalk";import{NodeHttpTransport as ge}from"@improbable-eng/grpc-web-node-http-transport";function ue(e){return fe(pe,me(e,ge()))}var ye={command:"faucet",describe:"Interact with a MUD faucet",builder(e){return e.options({dripDev:{type:"boolean",desc:"Request a drip from the dev endpoint (requires faucet to have dev mode enabled)",default:!0},faucetUrl:{type:"string",desc:"URL of the MUD faucet",default:"https://faucet.testnet-mud-services.linfra.xyz"},address:{type:"string",desc:"Ethereum address to fund",required:!0}})},async handler({dripDev:e,faucetUrl:o,address:t}){let n=ue(o);e&&(console.log(P.yellow("Dripping to",t)),await n.dripDev({address:t}),console.log(P.yellow("Success"))),process.exit(0)}},E=ye;import{readFileSync as G,writeFileSync as j,rmSync as $}from"fs";import{execa as he}from"execa";import d from"chalk";import{table as be,getBorderCharacters as we}from"table";var W="MudGasReport",ve={command:"gas-report",describe:"Create a gas report",builder(e){return e.options({path:{type:"array",string:!0,default:["Gas.t.sol"],desc:"File containing the gas tests"},save:{type:"string",desc:"Save the gas report to a file"},compare:{type:"string",desc:"Compare to an existing gas report"}})},async handler({path:e,save:o,compare:t}){let n=e.filter(r=>r.endsWith(".t.sol")),s=await Promise.all(n.map(r=>De(r)));process.once("SIGINT",()=>{console.log("caught sigint, deleting temp files"),s.forEach(r=>$(r))});let i;try{i=await Ce()}catch{setTimeout(()=>process.exit());return}finally{s.forEach(r=>$(r))}if(t)try{let r=JSON.parse(G(t,"utf8"));i=i.map(l=>{let m=r.find(c=>c.name===l.name&&c.functionCall===l.functionCall);return{...l,prevGasUsed:m?.gasUsed}})}catch{console.log(d.red(`Gas report to compare not found: ${t}`)),t=void 0}ke(i,t),o&&xe(i,o),process.exit(0)}},I=ve;async function De(e){console.log("Creating gas report for",d.bold(e));let o=G(e,"utf8"),t=o,n=new RegExp(/function (.*){/g),s;for(;(s=n.exec(o))!==null;){let m=s[0];t=t.replace(m,`${m}
uint256 _gasreport;`)}let i=new RegExp(/\/\/ !gasreport (.*)\n(.*)/g),r;for(;(r=i.exec(o))!==null;){let m=r[1],c=r[2].trim();t=t.replace(r[0],`
_gasreport = gasleft();
${c}
_gasreport = _gasreport - gasleft();
console.log("GAS REPORT(${e}): ${m} [${c.replaceAll('"','\\"')}]:", _gasreport);`)}t=t.replace(/pure/g,"view");let l=e.replace(/\.t\.sol$/,`${W}.t.sol`);return j(l,t),l}async function Ce(){console.log("Running gas report");let e=[],o="";try{o=(await he("forge",["test","--match-path",`*${W}*`,"-vvv"],{stdio:["inherit","pipe","inherit"]})).stdout}catch(s){throw console.log(s.stdout??s),console.log(d.red(`
-----------
Error while running the gas report (see above)`)),s}let t=new RegExp(/GAS REPORT\((.*)\): (.*) \[(.*)\]: (.*)/g),n;for(;(n=t.exec(o))!==null;){let s=n[1],i=n[2],r=n[3].replace(";",""),l=parseInt(n[4]);e.push({source:s,name:i,functionCall:r,gasUsed:l})}return e.sort((s,i)=>s.source.localeCompare(i.source)),e}function ke(e,o){o&&console.log(d.bold(`Gas report compared to ${o}`));let t=[d.bold("Source"),d.bold("Name"),d.bold("Function call"),d.bold("Gas used"),...o?[d.bold("Prev gas used"),d.bold("Difference")]:[]],n=e.map(i=>{let r=i.prevGasUsed?i.gasUsed-i.prevGasUsed:0,l=r>0?d.red(`+${r}`):r<0?d.green(`${r}`):r,m=o?[i.prevGasUsed??"n/a",l]:[],c=r>0?d.red(i.gasUsed):r<0?d.green(i.gasUsed):i.gasUsed;return[i.source,i.name,i.functionCall,c,...m]}),s=[t,...n];console.log(be(s,{border:we("norc")}))}function xe(e,o){console.log(d.bold(`Saving gas report to ${o}`)),j(o,`${JSON.stringify(e,null,2)}
`)}var Me={command:"hello <name>",describe:"Greet <name> with Hello",builder(e){return e.options({upper:{type:"boolean"}}).positional("name",{type:"string",demandOption:!0})},handler({name:e}){let o=`Gm, ${e}!`;console.log(o),process.exit(0)}},A=Me;import Oe from"path";import{loadConfig as Se}from"@latticexyz/config/node";import{tablegen as Re}from"@latticexyz/store";import{getSrcDirectory as Ue}from"@latticexyz/common/foundry";var Pe={command:"tablegen",describe:"Autogenerate MUD Store table libraries based on the config file",builder(e){return e.options({configPath:{type:"string",desc:"Path to the config file"}})},async handler({configPath:e}){let o=await Se(e),t=await Ue();await Re(o,Oe.join(t,o.codegenDirectory)),process.exit(0)}},F=Pe;import{loadConfig as Ee}from"@latticexyz/config/node";var $e={command:"tsgen",describe:"Autogenerate MUD typescript definitions based on the config file",builder(e){return e.options({configPath:{type:"string",demandOption:!0,desc:"Path to the config file"},out:{type:"string",demandOption:!0,desc:"Directory to output MUD typescript definition files"}})},async handler(e){let{configPath:o,out:t}=e,n=await Ee(o);await M(n,t),process.exit(0)}},T=$e;import D from"chalk";import{ZodError as Ge}from"zod";import{fromZodError as je,ValidationError as We}from"zod-validation-error";import{NotInsideProjectError as Ie}from"@latticexyz/config";import{MUDError as Ae}from"@latticexyz/common/errors";function y(e){if(e instanceof We)console.log(D.redBright(e.message));else if(e instanceof Ge){let o=je(e,{prefixSeparator:`
- `,issueSeparator:`
- `});console.log(D.redBright(o.message))}else e instanceof Ie?(console.log(D.red(e.message)),console.log(""),console.log(D.blue("To learn more about MUD's configuration, please go to https://mud.dev/packages/cli/"))):e instanceof Ae?console.log(D.red(e)):console.log(e)}import{getOutDirectory as Fe}from"@latticexyz/common/foundry";import Te from"path";import{runTypeChain as Ne}from"typechain";async function N(){let e=process.cwd(),o=await Fe(),t=Te.join(process.cwd(),o,"IWorld.sol/IWorld.json");await Ne({cwd:e,filesToProcess:[t],allFiles:[t],target:"ethers-v5"}),console.log("Typechain generated IWorld interface")}import ze from"chalk";function z(){console.log(ze.yellow(`
.------..------..------.
|M.--. ||U.--. ||D.--. |
| (\\/) || (\\/) || :/\\: |
| :\\/: || :\\/: || (__) |
| '--'M|| '--'U|| '--'D|
'------''------''------'
`))}var S={configPath:{type:"string",desc:"Path to the config file"},clean:{type:"boolean",desc:"Remove the build forge artifacts and cache directories before building"},printConfig:{type:"boolean",desc:"Print the resolved config"},profile:{type:"string",desc:"The foundry profile to use"},debug:{type:"boolean",desc:"Print debug logs, like full error messages"},priorityFeeMultiplier:{type:"number",desc:"Multiply the estimated priority fee by the provided factor",default:1},saveDeployment:{type:"boolean",desc:"Save the deployment info to a file",default:!0},rpc:{type:"string",desc:"The RPC URL to use. Defaults to the RPC url from the local foundry.toml"},worldAddress:{type:"string",desc:"Deploy to an existing World at the given address"},srcDir:{type:"string",desc:"Source directory. Defaults to foundry src directory."},disableTxWait:{type:"boolean",desc:"Disable waiting for transactions to be confirmed.",default:!1},pollInterval:{type:"number",desc:"Interval in miliseconds to use to poll for transaction receipts / block inclusion",default:1e3},skipBuild:{type:"boolean",desc:"Skip rebuilding the contracts before deploying"}},Ve={command:"deploy",describe:"Deploy MUD contracts",builder(e){return e.options(S)},async handler(e){try{await u(e)}catch(o){y(o),process.exit(1)}process.exit(0)}},V=Ve;import{loadConfig as Je}from"@latticexyz/config/node";import{worldgen as _e}from"@latticexyz/world/node";import{getSrcDirectory as Be}from"@latticexyz/common/foundry";import He from"glob";import J,{basename as Le}from"path";import{rmSync as qe}from"fs";var Ze={command:"worldgen",describe:"Autogenerate interfaces for Systems and World based on existing contracts and the config file",builder(e){return e.options({configPath:{type:"string",desc:"Path to the config file"},clean:{type:"boolean",desc:"Clear the worldgen directory before generating new interfaces"}})},async handler(e){await R(e),process.exit(0)}};async function R(e){let o=e.srcDir??await Be(),t=He.sync(`${o}/**/*.sol`).map(i=>({path:i,basename:Le(i,".sol")})),n=e.config??await Je(e.configPath),s=J.join(o,n.codegenDirectory);e.clean&&qe(J.join(s,n.worldgenDirectory),{recursive:!0,force:!0}),await _e(n,t,s)}var _=Ze;import b from"chalk";import{existsSync as Xe,readFileSync as Qe,rmSync as Ye,writeFileSync as H}from"fs";import h from"path";import{MUDError as k}from"@latticexyz/common/errors";var B={name:"@latticexyz/cli",version:"1.42.0",description:"Command line interface for mud",repository:{type:"git",url:"https://github.com/latticexyz/mud.git",directory:"packages/cli"},license:"MIT",type:"module",exports:{".":"./dist/index.js"},types:"src/index.ts",bin:{mud:"./dist/mud.js"},scripts:{build:"pnpm run build:js","build:js":"tsup && chmod +x ./dist/mud.js",clean:"pnpm run clean:js","clean:js":"rimraf dist",dev:"tsup --watch","generate-test-tables":"tsx ./scripts/generate-test-tables.ts",lint:"eslint . --ext .ts",test:"tsc --noEmit && pnpm run generate-test-tables && forge test"},dependencies:{"@ethersproject/abi":"^5.7.0","@ethersproject/providers":"^5.7.2","@improbable-eng/grpc-web":"^0.15.0","@improbable-eng/grpc-web-node-http-transport":"^0.15.0","@latticexyz/common":"workspace:*","@latticexyz/config":"workspace:*","@latticexyz/schema-type":"workspace:*","@latticexyz/services":"workspace:*","@latticexyz/solecs":"workspace:*","@latticexyz/std-contracts":"workspace:*","@latticexyz/store":"workspace:*","@latticexyz/world":"workspace:*","@typechain/ethers-v5":"^10.2.0",chalk:"^5.0.1",chokidar:"^3.5.3",dotenv:"^16.0.3",ejs:"^3.1.8",ethers:"^5.7.2",execa:"^7.0.0",glob:"^8.0.3","nice-grpc-web":"^2.0.1",openurl:"^1.1.1",path:"^0.12.7",table:"^6.8.1","throttle-debounce":"^5.0.0",typechain:"^8.1.1",typescript:"^4.9.5",yargs:"^17.7.1",zod:"^3.21.4","zod-validation-error":"^1.3.0"},devDependencies:{"@types/ejs":"^3.1.1","@types/glob":"^7.2.0","@types/node":"^18.15.11","@types/openurl":"^1.0.0","@types/throttle-debounce":"^5.0.0","@types/yargs":"^17.0.10","ds-test":"https://github.com/dapphub/ds-test.git#c9ce3f25bde29fc5eb9901842bf02850dfd2d084","forge-std":"https://github.com/foundry-rs/forge-std.git#b4f121555729b3afb3c5ffccb62ff4b6e2818fd3",tsup:"^6.7.0",tsx:"^3.12.6",vitest:"0.30.1"},gitHead:"914a1e0ae4a573d685841ca2ea921435057deb8f"};var O=".mudbackup",C="@latticexyz",eo={command:"set-version",describe:"Install a custom MUD version and optionally backup the previously installed version",builder(e){return e.options({backup:{type:"boolean",description:`Back up the current MUD versions to "${O}"`},force:{type:"boolean",description:`Backup fails if a "${O}" file is found, unless --force is provided`},restore:{type:"boolean",description:`Restore the previous MUD versions from "${O}"`},mudVersion:{alias:"v",type:"string",description:"The MUD version to install"},link:{alias:"l",type:"string",description:"Relative path to the local MUD root directory to link"}})},async handler(e){try{if(!e.mudVersion&&!e.link&&!e.restore)throw new k("`--mudVersion` or `--link` is required unless --restore is provided.");if(e.link&&e.mudVersion)throw new k("Options `--link` and `--mudVersion` are mutually exclusive");e.mudVersion=e.mudVersion==="canary"?await oo(B.name):e.mudVersion;let o="./package.json",{workspaces:t}=L(o,e);if(t)for(let n of t){let s=h.join(n,"/package.json");L(s,e)}}catch(o){y(o)}finally{process.exit(0)}}};function L(e,o){let{restore:t,force:n,link:s}=o,{backup:i,mudVersion:r}=o,l=h.join(h.dirname(e),O),m=Xe(l);if(s&&!m&&(i=!0),i&&!n&&m)throw new k(`A backup file already exists at ${l}.
Use --force to overwrite it or --restore to restore it.`);let c=q(e),w=t?q(l):void 0,g={};for(let a in c.dependencies)a.startsWith(C)&&(g[a]=c.dependencies[a]);let v={};for(let a in c.devDependencies)a.startsWith(C)&&(v[a]=c.devDependencies[a]);i&&(H(l,JSON.stringify({dependencies:g,devDependencies:v},null,2)),console.log(b.green(`Backed up MUD dependencies from ${e} to ${l}`)));for(let a in c.dependencies)a.startsWith(C)&&(c.dependencies[a]=p(a,"dependencies"));for(let a in c.devDependencies)a.startsWith(C)&&(c.devDependencies[a]=p(a,"devDependencies"));return H(e,JSON.stringify(c,null,2)+`
`),console.log(`Updating ${e}`),Z(g,c.dependencies),Z(v,c.devDependencies),t&&!i&&(Ye(l),console.log(b.green(`Cleaned up ${l}`))),c;function p(a,f){return t&&w?w[f][a]:(s&&(r=to(e,s,a)),r||c[f][a])}}function q(e){try{let o=Qe(e,"utf8");return JSON.parse(o)}catch{throw new k("Could not read JSON at "+e)}}async function oo(e){try{console.log(b.blue("fetching MUD canary version..."));let t=(await(await fetch(`https://registry.npmjs.org/${e}`)).json())["dist-tags"].canary;return console.log(b.green("MUD canary version:",t)),t}catch{throw new k(`Could not fetch canary version of ${e}`)}}function Z(e,o){for(let t in e)e[t]!==o[t]&&console.log(`${t}: ${b.red(e[t])} -> ${b.green(o[t])}`)}function to(e,o,t){let n=t.replace(C,""),s=h.relative(h.dirname(e),process.cwd());return"link:"+h.join(s,o,"packages",n)}var K=eo;import{anvil as ro,forge as no,getRpcUrl as so}from"@latticexyz/common/foundry";import io from"chalk";import{rmSync as ao,writeFileSync as co}from"fs";var X=".mudtest",lo={command:"test",describe:"Run tests in MUD contracts",builder(e){return e.options({...S,port:{type:"number",description:"Port to run internal node for fork testing on",default:4242},worldAddress:{type:"string",description:"Address of an existing world contract. If provided, deployment is skipped and the RPC provided in the foundry.toml is used for fork testing."},forgeOptions:{type:"string",description:"Options to pass to forge test"}})},async handler(e){if(!e.worldAddress){let s=["--block-base-fee-per-gas","0","--port",String(e.port)];ro(s)}let o=e.worldAddress?await so(e.profile):`http://127.0.0.1:${e.port}`,t=e.worldAddress??(await u({...e,saveDeployment:!1,rpc:o})).worldAddress;console.log(io.blue("World address",t)),co(X,t);let n=e.forgeOptions?.replaceAll("\\","").split(" ")??[];try{let s=await no(["test","--fork-url",o,...n],{profile:e.profile});console.log(s)}catch(s){console.error(s)}ao(X),process.exit(0)}},Q=lo;import{anvil as po,forge as Y,getRpcUrl as mo,getScriptDirectory as fo,getSrcDirectory as go}from"@latticexyz/common/foundry";import x from"chalk";import uo from"chokidar";import{loadConfig as ee,resolveConfigPath as yo}from"@latticexyz/config/node";import{tablegen as ho}from"@latticexyz/store";import oe from"path";import{debounce as bo}from"throttle-debounce";import{homedir as wo}from"os";import{rmSync as vo}from"fs";var Do={command:"dev-contracts",describe:"Start a development server for MUD contracts",builder(e){return e.options({rpc:{type:"string",decs:"RPC endpoint of the development node. If none is provided, an anvil instance is spawned in the background on port 8545."},configPath:{type:"string",decs:"Path to MUD config"},tsgenOutput:{type:"string",demandOption:!0,desc:"Directory to output MUD typescript definition files"}})},async handler(e){e.tsgenOutputDir||console.error("No output provided"),await Y(["clean"]);let o=e.rpc??await mo(),t=e.configPath??await yo(e.configPath),n=await go(),s=await fo(),i=await ee(t);if(await w(i),await g(i),!e.rpc){console.log(x.gray("Cleaning devnode cache"));let p=wo();vo(oe.join(p,".foundry","anvil","tmp"),{recursive:!0,force:!0}),po(["--block-time","1","--block-base-fee-per-gas","0"])}let r={config:!1,contracts:!1},l={current:!1};uo.watch([t,n]).on("all",async(p,a)=>{if(a.includes(t)&&(r.config=!0,r.contracts=!0),a.includes(n)||a.includes(s)){if(a.includes(i.codegenDirectory))return;r.contracts=!0}c()});let c=bo(100,async()=>{if(l.current)return;l.current=!0;let{config:p,contracts:a}=r;r.config=!1,r.contracts=!1;try{let f=await ee(t);p&&await w(f),a&&await g(f),await v()}catch(f){console.error(x.red("MUD dev-contracts watcher failed to deploy config or contracts changes"),f)}l.current=!1,(r.config||r.contracts)&&(console.log("Detected change while handling the previous change"),c()),z(),console.log("MUD watching for changes...")});async function w(p){console.log(x.blue("mud.config.ts changed - regenerating tables and recs types"));let a=oe.join(n,p.codegenDirectory);await ho(p,a),await M(p,e.tsgenOutput)}async function g(p){console.log(x.blue("contracts changed - regenerating interfaces and contract types")),await R({config:p,clean:!0,srcDir:n}),await Y(["build"]),await N()}async function v(){console.log(x.blue("redeploying World")),await u({configPath:t,skipBuild:!0,priorityFeeMultiplier:1,disableTxWait:!0,pollInterval:1e3,saveDeployment:!0,srcDir:n,rpc:o})}}},te=Do;var re=[V,U,E,I,A,F,T,_,K,Q,te];import*as se from"dotenv";import ne from"chalk";se.config();Co(ko(process.argv)).scriptName("mud").command(re).strict().fail((e,o)=>{console.error(ne.red(e)),e.includes("Missing required argument")&&console.log(ne.yellow(`Run 'pnpm mud ${process.argv[2]} --help' for a list of available and required arguments.`)),console.log(""),y(o),console.log(""),process.exit(1)}).alias({h:"help"}).argv;
//# sourceMappingURL=mud.js.map