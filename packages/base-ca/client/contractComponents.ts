/* Autogenerated file. Do not edit manually. */

import { TableId } from "@latticexyz/common";
import { defineComponent, Type as RecsType, World } from "@latticexyz/recs";

export function defineContractComponents(world: World) {
  return {
    CAVoxelConfig: (() => {
      const tableId = new TableId("", "CAVoxelConfig");
      return defineComponent(
        world,
        {
          enterWorldSelector: RecsType.String,
          exitWorldSelector: RecsType.String,
          voxelVariantSelector: RecsType.String,
        },
        {
          metadata: {
            contractId: tableId.toHex(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    CAVoxelInteractionConfig: (() => {
      const tableId = new TableId("", "CAVoxelInteracti");
      return defineComponent(
        world,
        {
          interactionSelectors: RecsType.StringArray,
        },
        {
          metadata: {
            contractId: tableId.toHex(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    CAPosition: (() => {
      const tableId = new TableId("", "CAPosition");
      return defineComponent(
        world,
        {
          x: RecsType.Number,
          y: RecsType.Number,
          z: RecsType.Number,
        },
        {
          metadata: {
            contractId: tableId.toHex(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    CAVoxelType: (() => {
      const tableId = new TableId("", "CAVoxelType");
      return defineComponent(
        world,
        {
          voxelTypeId: RecsType.String,
          voxelVariantId: RecsType.String,
        },
        {
          metadata: {
            contractId: tableId.toHex(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
    ElectronTunnelSpot: (() => {
      const tableId = new TableId("", "ElectronTunnelSp");
      return defineComponent(
        world,
        {
          atTop: RecsType.Boolean,
          sibling: RecsType.String,
        },
        {
          metadata: {
            contractId: tableId.toHex(),
            tableId: tableId.toString(),
          },
        }
      );
    })(),
  };
}
