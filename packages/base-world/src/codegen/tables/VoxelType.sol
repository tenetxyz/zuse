// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("VoxelType")));
bytes32 constant VoxelTypeTableId = _tableId;

import { VoxelTypeData } from "@tenet-utils/src/Types.sol";

library VoxelType {
  /** Get the table's key schema */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](2);
    _schema[0] = SchemaType.UINT32;
    _schema[1] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's value schema */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](3);
    _schema[0] = SchemaType.BYTES32;
    _schema[1] = SchemaType.BYTES32;
    _schema[2] = SchemaType.BOOL;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's key names */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](2);
    keyNames[0] = "scale";
    keyNames[1] = "entity";
  }

  /** Get the table's field names */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](3);
    fieldNames[0] = "voxelTypeId";
    fieldNames[1] = "voxelVariantId";
    fieldNames[2] = "hasValue";
  }

  /** Register the table's key schema, value schema, key names and value names */
  function register() internal {
    StoreSwitch.registerTable(_tableId, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Register the table's key schema, value schema, key names and value names (using the specified store) */
  function register(IStore _store) internal {
    _store.registerTable(_tableId, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Get voxelTypeId */
  function getVoxelTypeId(uint32 scale, bytes32 entity) internal view returns (bytes32 voxelTypeId) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(scale));
    _keyTuple[1] = entity;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0, getValueSchema());
    return (Bytes.slice32(_blob, 0));
  }

  /** Get voxelTypeId (using the specified store) */
  function getVoxelTypeId(IStore _store, uint32 scale, bytes32 entity) internal view returns (bytes32 voxelTypeId) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(scale));
    _keyTuple[1] = entity;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0, getValueSchema());
    return (Bytes.slice32(_blob, 0));
  }

  /** Set voxelTypeId */
  function setVoxelTypeId(uint32 scale, bytes32 entity, bytes32 voxelTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(scale));
    _keyTuple[1] = entity;

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((voxelTypeId)), getValueSchema());
  }

  /** Set voxelTypeId (using the specified store) */
  function setVoxelTypeId(IStore _store, uint32 scale, bytes32 entity, bytes32 voxelTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(scale));
    _keyTuple[1] = entity;

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((voxelTypeId)), getValueSchema());
  }

  /** Get voxelVariantId */
  function getVoxelVariantId(uint32 scale, bytes32 entity) internal view returns (bytes32 voxelVariantId) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(scale));
    _keyTuple[1] = entity;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1, getValueSchema());
    return (Bytes.slice32(_blob, 0));
  }

  /** Get voxelVariantId (using the specified store) */
  function getVoxelVariantId(
    IStore _store,
    uint32 scale,
    bytes32 entity
  ) internal view returns (bytes32 voxelVariantId) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(scale));
    _keyTuple[1] = entity;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1, getValueSchema());
    return (Bytes.slice32(_blob, 0));
  }

  /** Set voxelVariantId */
  function setVoxelVariantId(uint32 scale, bytes32 entity, bytes32 voxelVariantId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(scale));
    _keyTuple[1] = entity;

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((voxelVariantId)), getValueSchema());
  }

  /** Set voxelVariantId (using the specified store) */
  function setVoxelVariantId(IStore _store, uint32 scale, bytes32 entity, bytes32 voxelVariantId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(scale));
    _keyTuple[1] = entity;

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((voxelVariantId)), getValueSchema());
  }

  /** Get hasValue */
  function getHasValue(uint32 scale, bytes32 entity) internal view returns (bool hasValue) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(scale));
    _keyTuple[1] = entity;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2, getValueSchema());
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Get hasValue (using the specified store) */
  function getHasValue(IStore _store, uint32 scale, bytes32 entity) internal view returns (bool hasValue) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(scale));
    _keyTuple[1] = entity;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2, getValueSchema());
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Set hasValue */
  function setHasValue(uint32 scale, bytes32 entity, bool hasValue) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(scale));
    _keyTuple[1] = entity;

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((hasValue)), getValueSchema());
  }

  /** Set hasValue (using the specified store) */
  function setHasValue(IStore _store, uint32 scale, bytes32 entity, bool hasValue) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(scale));
    _keyTuple[1] = entity;

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((hasValue)), getValueSchema());
  }

  /** Get the full data */
  function get(uint32 scale, bytes32 entity) internal view returns (VoxelTypeData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(scale));
    _keyTuple[1] = entity;

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getValueSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, uint32 scale, bytes32 entity) internal view returns (VoxelTypeData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(scale));
    _keyTuple[1] = entity;

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getValueSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(uint32 scale, bytes32 entity, bytes32 voxelTypeId, bytes32 voxelVariantId, bool hasValue) internal {
    bytes memory _data = encode(voxelTypeId, voxelVariantId, hasValue);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(scale));
    _keyTuple[1] = entity;

    StoreSwitch.setRecord(_tableId, _keyTuple, _data, getValueSchema());
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    uint32 scale,
    bytes32 entity,
    bytes32 voxelTypeId,
    bytes32 voxelVariantId,
    bool hasValue
  ) internal {
    bytes memory _data = encode(voxelTypeId, voxelVariantId, hasValue);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(scale));
    _keyTuple[1] = entity;

    _store.setRecord(_tableId, _keyTuple, _data, getValueSchema());
  }

  /** Set the full data using the data struct */
  function set(uint32 scale, bytes32 entity, VoxelTypeData memory _table) internal {
    set(scale, entity, _table.voxelTypeId, _table.voxelVariantId, _table.hasValue);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, uint32 scale, bytes32 entity, VoxelTypeData memory _table) internal {
    set(_store, scale, entity, _table.voxelTypeId, _table.voxelVariantId, _table.hasValue);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (VoxelTypeData memory _table) {
    _table.voxelTypeId = (Bytes.slice32(_blob, 0));

    _table.voxelVariantId = (Bytes.slice32(_blob, 32));

    _table.hasValue = (_toBool(uint8(Bytes.slice1(_blob, 64))));
  }

  /** Tightly pack full data using this table's schema */
  function encode(bytes32 voxelTypeId, bytes32 voxelVariantId, bool hasValue) internal pure returns (bytes memory) {
    return abi.encodePacked(voxelTypeId, voxelVariantId, hasValue);
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(uint32 scale, bytes32 entity) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(scale));
    _keyTuple[1] = entity;

    return _keyTuple;
  }

  /* Delete all data for given keys */
  function deleteRecord(uint32 scale, bytes32 entity) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(scale));
    _keyTuple[1] = entity;

    StoreSwitch.deleteRecord(_tableId, _keyTuple, getValueSchema());
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, uint32 scale, bytes32 entity) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(scale));
    _keyTuple[1] = entity;

    _store.deleteRecord(_tableId, _keyTuple, getValueSchema());
  }
}

function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
