// @generated by protobuf-ts 2.9.0 with parameter long_type_string
// @generated from protobuf file "player.proto" (package "Shard", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { PlayerService } from "./player";
import type { Attack } from "./player";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Player } from "./player";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service Shard.PlayerService
 */
export interface IPlayerServiceClient {
    /**
     * @generated from protobuf rpc: UpdatePlayer(Shard.Player) returns (Shard.Player);
     */
    updatePlayer(input: Player, options?: RpcOptions): UnaryCall<Player, Player>;
    /**
     * @generated from protobuf rpc: AttackPlayer(Shard.Attack) returns (Shard.Player);
     */
    attackPlayer(input: Attack, options?: RpcOptions): UnaryCall<Attack, Player>;
}
/**
 * @generated from protobuf service Shard.PlayerService
 */
export class PlayerServiceClient implements IPlayerServiceClient, ServiceInfo {
    typeName = PlayerService.typeName;
    methods = PlayerService.methods;
    options = PlayerService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: UpdatePlayer(Shard.Player) returns (Shard.Player);
     */
    updatePlayer(input: Player, options?: RpcOptions): UnaryCall<Player, Player> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Player, Player>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AttackPlayer(Shard.Attack) returns (Shard.Player);
     */
    attackPlayer(input: Attack, options?: RpcOptions): UnaryCall<Attack, Player> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<Attack, Player>("unary", this._transport, method, opt, input);
    }
}
