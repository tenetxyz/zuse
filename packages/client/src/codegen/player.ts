// @generated by protobuf-ts 2.9.0 with parameter long_type_string
// @generated from protobuf file "player.proto" (package "Shard", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Shard.Coord3
 */
export interface Coord3 {
    /**
     * @generated from protobuf field: float x = 1;
     */
    x: number;
    /**
     * @generated from protobuf field: float y = 2;
     */
    y: number;
    /**
     * @generated from protobuf field: float z = 3;
     */
    z: number;
}
/**
 * @generated from protobuf message Shard.Quaternion
 */
export interface Quaternion {
    /**
     * @generated from protobuf field: float x = 1;
     */
    x: number;
    /**
     * @generated from protobuf field: float y = 2;
     */
    y: number;
    /**
     * @generated from protobuf field: float z = 3;
     */
    z: number;
    /**
     * @generated from protobuf field: float w = 4;
     */
    w: number;
}
/**
 * @generated from protobuf message Shard.Player
 */
export interface Player {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: Shard.Coord3 position = 2;
     */
    position?: Coord3;
    /**
     * @generated from protobuf field: Shard.Quaternion direction = 3;
     */
    direction?: Quaternion;
    /**
     * @generated from protobuf field: uint32 health = 4;
     */
    health: number;
    /**
     * @generated from protobuf field: uint32 attack_cooldown_ticks_left = 5;
     */
    attackCooldownTicksLeft: number;
}
/**
 * @generated from protobuf message Shard.Attack
 */
export interface Attack {
    /**
     * @generated from protobuf field: string attacker_id = 1;
     */
    attackerId: string;
    /**
     * @generated from protobuf field: string victim_id = 2;
     */
    victimId: string;
    /**
     * @generated from protobuf field: uint32 damage = 3;
     */
    damage: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class Coord3$Type extends MessageType<Coord3> {
    constructor() {
        super("Shard.Coord3", [
            { no: 1, name: "x", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "y", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "z", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<Coord3>): Coord3 {
        const message = { x: 0, y: 0, z: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Coord3>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Coord3): Coord3 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float x */ 1:
                    message.x = reader.float();
                    break;
                case /* float y */ 2:
                    message.y = reader.float();
                    break;
                case /* float z */ 3:
                    message.z = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Coord3, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float x = 1; */
        if (message.x !== 0)
            writer.tag(1, WireType.Bit32).float(message.x);
        /* float y = 2; */
        if (message.y !== 0)
            writer.tag(2, WireType.Bit32).float(message.y);
        /* float z = 3; */
        if (message.z !== 0)
            writer.tag(3, WireType.Bit32).float(message.z);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Shard.Coord3
 */
export const Coord3 = new Coord3$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Quaternion$Type extends MessageType<Quaternion> {
    constructor() {
        super("Shard.Quaternion", [
            { no: 1, name: "x", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "y", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "z", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "w", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<Quaternion>): Quaternion {
        const message = { x: 0, y: 0, z: 0, w: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Quaternion>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Quaternion): Quaternion {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float x */ 1:
                    message.x = reader.float();
                    break;
                case /* float y */ 2:
                    message.y = reader.float();
                    break;
                case /* float z */ 3:
                    message.z = reader.float();
                    break;
                case /* float w */ 4:
                    message.w = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Quaternion, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float x = 1; */
        if (message.x !== 0)
            writer.tag(1, WireType.Bit32).float(message.x);
        /* float y = 2; */
        if (message.y !== 0)
            writer.tag(2, WireType.Bit32).float(message.y);
        /* float z = 3; */
        if (message.z !== 0)
            writer.tag(3, WireType.Bit32).float(message.z);
        /* float w = 4; */
        if (message.w !== 0)
            writer.tag(4, WireType.Bit32).float(message.w);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Shard.Quaternion
 */
export const Quaternion = new Quaternion$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Player$Type extends MessageType<Player> {
    constructor() {
        super("Shard.Player", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "position", kind: "message", T: () => Coord3 },
            { no: 3, name: "direction", kind: "message", T: () => Quaternion },
            { no: 4, name: "health", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "attack_cooldown_ticks_left", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<Player>): Player {
        const message = { id: "", health: 0, attackCooldownTicksLeft: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Player>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Player): Player {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* Shard.Coord3 position */ 2:
                    message.position = Coord3.internalBinaryRead(reader, reader.uint32(), options, message.position);
                    break;
                case /* Shard.Quaternion direction */ 3:
                    message.direction = Quaternion.internalBinaryRead(reader, reader.uint32(), options, message.direction);
                    break;
                case /* uint32 health */ 4:
                    message.health = reader.uint32();
                    break;
                case /* uint32 attack_cooldown_ticks_left */ 5:
                    message.attackCooldownTicksLeft = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Player, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* Shard.Coord3 position = 2; */
        if (message.position)
            Coord3.internalBinaryWrite(message.position, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* Shard.Quaternion direction = 3; */
        if (message.direction)
            Quaternion.internalBinaryWrite(message.direction, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* uint32 health = 4; */
        if (message.health !== 0)
            writer.tag(4, WireType.Varint).uint32(message.health);
        /* uint32 attack_cooldown_ticks_left = 5; */
        if (message.attackCooldownTicksLeft !== 0)
            writer.tag(5, WireType.Varint).uint32(message.attackCooldownTicksLeft);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Shard.Player
 */
export const Player = new Player$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Attack$Type extends MessageType<Attack> {
    constructor() {
        super("Shard.Attack", [
            { no: 1, name: "attacker_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "victim_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "damage", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<Attack>): Attack {
        const message = { attackerId: "", victimId: "", damage: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Attack>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Attack): Attack {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string attacker_id */ 1:
                    message.attackerId = reader.string();
                    break;
                case /* string victim_id */ 2:
                    message.victimId = reader.string();
                    break;
                case /* uint32 damage */ 3:
                    message.damage = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Attack, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string attacker_id = 1; */
        if (message.attackerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.attackerId);
        /* string victim_id = 2; */
        if (message.victimId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.victimId);
        /* uint32 damage = 3; */
        if (message.damage !== 0)
            writer.tag(3, WireType.Varint).uint32(message.damage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Shard.Attack
 */
export const Attack = new Attack$Type();
/**
 * @generated ServiceType for protobuf service Shard.PlayerService
 */
export const PlayerService = new ServiceType("Shard.PlayerService", [
    { name: "UpdatePlayer", options: {}, I: Player, O: Player },
    { name: "AttackPlayer", options: {}, I: Attack, O: Player }
]);
