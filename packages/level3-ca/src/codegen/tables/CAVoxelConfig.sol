// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("CAVoxelConfig")));
bytes32 constant CAVoxelConfigTableId = _tableId;

struct CAVoxelConfigData {
  bytes4 enterWorldSelector;
  bytes4 exitWorldSelector;
  bytes4 voxelVariantSelector;
}

library CAVoxelConfig {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](3);
    _schema[0] = SchemaType.BYTES4;
    _schema[1] = SchemaType.BYTES4;
    _schema[2] = SchemaType.BYTES4;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](3);
    _fieldNames[0] = "enterWorldSelector";
    _fieldNames[1] = "exitWorldSelector";
    _fieldNames[2] = "voxelVariantSelector";
    return ("CAVoxelConfig", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get enterWorldSelector */
  function getEnterWorldSelector(bytes32 voxelTypeId) internal view returns (bytes4 enterWorldSelector) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (Bytes.slice4(_blob, 0));
  }

  /** Get enterWorldSelector (using the specified store) */
  function getEnterWorldSelector(IStore _store, bytes32 voxelTypeId) internal view returns (bytes4 enterWorldSelector) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (Bytes.slice4(_blob, 0));
  }

  /** Set enterWorldSelector */
  function setEnterWorldSelector(bytes32 voxelTypeId, bytes4 enterWorldSelector) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((enterWorldSelector)));
  }

  /** Set enterWorldSelector (using the specified store) */
  function setEnterWorldSelector(IStore _store, bytes32 voxelTypeId, bytes4 enterWorldSelector) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((enterWorldSelector)));
  }

  /** Get exitWorldSelector */
  function getExitWorldSelector(bytes32 voxelTypeId) internal view returns (bytes4 exitWorldSelector) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (Bytes.slice4(_blob, 0));
  }

  /** Get exitWorldSelector (using the specified store) */
  function getExitWorldSelector(IStore _store, bytes32 voxelTypeId) internal view returns (bytes4 exitWorldSelector) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (Bytes.slice4(_blob, 0));
  }

  /** Set exitWorldSelector */
  function setExitWorldSelector(bytes32 voxelTypeId, bytes4 exitWorldSelector) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((exitWorldSelector)));
  }

  /** Set exitWorldSelector (using the specified store) */
  function setExitWorldSelector(IStore _store, bytes32 voxelTypeId, bytes4 exitWorldSelector) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((exitWorldSelector)));
  }

  /** Get voxelVariantSelector */
  function getVoxelVariantSelector(bytes32 voxelTypeId) internal view returns (bytes4 voxelVariantSelector) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (Bytes.slice4(_blob, 0));
  }

  /** Get voxelVariantSelector (using the specified store) */
  function getVoxelVariantSelector(
    IStore _store,
    bytes32 voxelTypeId
  ) internal view returns (bytes4 voxelVariantSelector) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (Bytes.slice4(_blob, 0));
  }

  /** Set voxelVariantSelector */
  function setVoxelVariantSelector(bytes32 voxelTypeId, bytes4 voxelVariantSelector) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((voxelVariantSelector)));
  }

  /** Set voxelVariantSelector (using the specified store) */
  function setVoxelVariantSelector(IStore _store, bytes32 voxelTypeId, bytes4 voxelVariantSelector) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((voxelVariantSelector)));
  }

  /** Get the full data */
  function get(bytes32 voxelTypeId) internal view returns (CAVoxelConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 voxelTypeId) internal view returns (CAVoxelConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 voxelTypeId,
    bytes4 enterWorldSelector,
    bytes4 exitWorldSelector,
    bytes4 voxelVariantSelector
  ) internal {
    bytes memory _data = encode(enterWorldSelector, exitWorldSelector, voxelVariantSelector);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 voxelTypeId,
    bytes4 enterWorldSelector,
    bytes4 exitWorldSelector,
    bytes4 voxelVariantSelector
  ) internal {
    bytes memory _data = encode(enterWorldSelector, exitWorldSelector, voxelVariantSelector);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 voxelTypeId, CAVoxelConfigData memory _table) internal {
    set(voxelTypeId, _table.enterWorldSelector, _table.exitWorldSelector, _table.voxelVariantSelector);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 voxelTypeId, CAVoxelConfigData memory _table) internal {
    set(_store, voxelTypeId, _table.enterWorldSelector, _table.exitWorldSelector, _table.voxelVariantSelector);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (CAVoxelConfigData memory _table) {
    _table.enterWorldSelector = (Bytes.slice4(_blob, 0));

    _table.exitWorldSelector = (Bytes.slice4(_blob, 4));

    _table.voxelVariantSelector = (Bytes.slice4(_blob, 8));
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    bytes4 enterWorldSelector,
    bytes4 exitWorldSelector,
    bytes4 voxelVariantSelector
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(enterWorldSelector, exitWorldSelector, voxelVariantSelector);
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 voxelTypeId) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 voxelTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 voxelTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
