// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("CreationRegistry")));
bytes32 constant CreationRegistryTableId = _tableId;

struct CreationRegistryData {
  uint32 numVoxels;
  bytes bodyTypes;
  bytes relativePositions;
  bytes baseCreations;
  bytes metadata;
}

library CreationRegistry {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](5);
    _schema[0] = SchemaType.UINT32;
    _schema[1] = SchemaType.BYTES;
    _schema[2] = SchemaType.BYTES;
    _schema[3] = SchemaType.BYTES;
    _schema[4] = SchemaType.BYTES;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](5);
    _fieldNames[0] = "numVoxels";
    _fieldNames[1] = "bodyTypes";
    _fieldNames[2] = "relativePositions";
    _fieldNames[3] = "baseCreations";
    _fieldNames[4] = "metadata";
    return ("CreationRegistry", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get numVoxels */
  function getNumVoxels(bytes32 creationId) internal view returns (uint32 numVoxels) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get numVoxels (using the specified store) */
  function getNumVoxels(IStore _store, bytes32 creationId) internal view returns (uint32 numVoxels) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set numVoxels */
  function setNumVoxels(bytes32 creationId, uint32 numVoxels) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((numVoxels)));
  }

  /** Set numVoxels (using the specified store) */
  function setNumVoxels(IStore _store, bytes32 creationId, uint32 numVoxels) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((numVoxels)));
  }

  /** Get bodyTypes */
  function getBodyTypes(bytes32 creationId) internal view returns (bytes memory bodyTypes) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (bytes(_blob));
  }

  /** Get bodyTypes (using the specified store) */
  function getBodyTypes(IStore _store, bytes32 creationId) internal view returns (bytes memory bodyTypes) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (bytes(_blob));
  }

  /** Set bodyTypes */
  function setBodyTypes(bytes32 creationId, bytes memory bodyTypes) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.setField(_tableId, _keyTuple, 1, bytes((bodyTypes)));
  }

  /** Set bodyTypes (using the specified store) */
  function setBodyTypes(IStore _store, bytes32 creationId, bytes memory bodyTypes) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.setField(_tableId, _keyTuple, 1, bytes((bodyTypes)));
  }

  /** Get the length of bodyTypes */
  function lengthBodyTypes(bytes32 creationId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 1, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of bodyTypes (using the specified store) */
  function lengthBodyTypes(IStore _store, bytes32 creationId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 1, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of bodyTypes (unchecked, returns invalid data if index overflows) */
  function getItemBodyTypes(bytes32 creationId, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 1, getSchema(), _index * 1, (_index + 1) * 1);
    return (bytes(_blob));
  }

  /** Get an item of bodyTypes (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemBodyTypes(IStore _store, bytes32 creationId, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 1, getSchema(), _index * 1, (_index + 1) * 1);
    return (bytes(_blob));
  }

  /** Push a slice to bodyTypes */
  function pushBodyTypes(bytes32 creationId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.pushToField(_tableId, _keyTuple, 1, bytes((_slice)));
  }

  /** Push a slice to bodyTypes (using the specified store) */
  function pushBodyTypes(IStore _store, bytes32 creationId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.pushToField(_tableId, _keyTuple, 1, bytes((_slice)));
  }

  /** Pop a slice from bodyTypes */
  function popBodyTypes(bytes32 creationId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.popFromField(_tableId, _keyTuple, 1, 1);
  }

  /** Pop a slice from bodyTypes (using the specified store) */
  function popBodyTypes(IStore _store, bytes32 creationId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.popFromField(_tableId, _keyTuple, 1, 1);
  }

  /** Update a slice of bodyTypes at `_index` */
  function updateBodyTypes(bytes32 creationId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.updateInField(_tableId, _keyTuple, 1, _index * 1, bytes((_slice)));
  }

  /** Update a slice of bodyTypes (using the specified store) at `_index` */
  function updateBodyTypes(IStore _store, bytes32 creationId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.updateInField(_tableId, _keyTuple, 1, _index * 1, bytes((_slice)));
  }

  /** Get relativePositions */
  function getRelativePositions(bytes32 creationId) internal view returns (bytes memory relativePositions) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (bytes(_blob));
  }

  /** Get relativePositions (using the specified store) */
  function getRelativePositions(
    IStore _store,
    bytes32 creationId
  ) internal view returns (bytes memory relativePositions) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (bytes(_blob));
  }

  /** Set relativePositions */
  function setRelativePositions(bytes32 creationId, bytes memory relativePositions) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.setField(_tableId, _keyTuple, 2, bytes((relativePositions)));
  }

  /** Set relativePositions (using the specified store) */
  function setRelativePositions(IStore _store, bytes32 creationId, bytes memory relativePositions) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.setField(_tableId, _keyTuple, 2, bytes((relativePositions)));
  }

  /** Get the length of relativePositions */
  function lengthRelativePositions(bytes32 creationId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 2, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of relativePositions (using the specified store) */
  function lengthRelativePositions(IStore _store, bytes32 creationId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 2, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of relativePositions (unchecked, returns invalid data if index overflows) */
  function getItemRelativePositions(bytes32 creationId, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 2, getSchema(), _index * 1, (_index + 1) * 1);
    return (bytes(_blob));
  }

  /** Get an item of relativePositions (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemRelativePositions(
    IStore _store,
    bytes32 creationId,
    uint256 _index
  ) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 2, getSchema(), _index * 1, (_index + 1) * 1);
    return (bytes(_blob));
  }

  /** Push a slice to relativePositions */
  function pushRelativePositions(bytes32 creationId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.pushToField(_tableId, _keyTuple, 2, bytes((_slice)));
  }

  /** Push a slice to relativePositions (using the specified store) */
  function pushRelativePositions(IStore _store, bytes32 creationId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.pushToField(_tableId, _keyTuple, 2, bytes((_slice)));
  }

  /** Pop a slice from relativePositions */
  function popRelativePositions(bytes32 creationId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.popFromField(_tableId, _keyTuple, 2, 1);
  }

  /** Pop a slice from relativePositions (using the specified store) */
  function popRelativePositions(IStore _store, bytes32 creationId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.popFromField(_tableId, _keyTuple, 2, 1);
  }

  /** Update a slice of relativePositions at `_index` */
  function updateRelativePositions(bytes32 creationId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.updateInField(_tableId, _keyTuple, 2, _index * 1, bytes((_slice)));
  }

  /** Update a slice of relativePositions (using the specified store) at `_index` */
  function updateRelativePositions(IStore _store, bytes32 creationId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.updateInField(_tableId, _keyTuple, 2, _index * 1, bytes((_slice)));
  }

  /** Get baseCreations */
  function getBaseCreations(bytes32 creationId) internal view returns (bytes memory baseCreations) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (bytes(_blob));
  }

  /** Get baseCreations (using the specified store) */
  function getBaseCreations(IStore _store, bytes32 creationId) internal view returns (bytes memory baseCreations) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (bytes(_blob));
  }

  /** Set baseCreations */
  function setBaseCreations(bytes32 creationId, bytes memory baseCreations) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.setField(_tableId, _keyTuple, 3, bytes((baseCreations)));
  }

  /** Set baseCreations (using the specified store) */
  function setBaseCreations(IStore _store, bytes32 creationId, bytes memory baseCreations) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.setField(_tableId, _keyTuple, 3, bytes((baseCreations)));
  }

  /** Get the length of baseCreations */
  function lengthBaseCreations(bytes32 creationId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 3, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of baseCreations (using the specified store) */
  function lengthBaseCreations(IStore _store, bytes32 creationId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 3, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of baseCreations (unchecked, returns invalid data if index overflows) */
  function getItemBaseCreations(bytes32 creationId, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 3, getSchema(), _index * 1, (_index + 1) * 1);
    return (bytes(_blob));
  }

  /** Get an item of baseCreations (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemBaseCreations(
    IStore _store,
    bytes32 creationId,
    uint256 _index
  ) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 3, getSchema(), _index * 1, (_index + 1) * 1);
    return (bytes(_blob));
  }

  /** Push a slice to baseCreations */
  function pushBaseCreations(bytes32 creationId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.pushToField(_tableId, _keyTuple, 3, bytes((_slice)));
  }

  /** Push a slice to baseCreations (using the specified store) */
  function pushBaseCreations(IStore _store, bytes32 creationId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.pushToField(_tableId, _keyTuple, 3, bytes((_slice)));
  }

  /** Pop a slice from baseCreations */
  function popBaseCreations(bytes32 creationId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.popFromField(_tableId, _keyTuple, 3, 1);
  }

  /** Pop a slice from baseCreations (using the specified store) */
  function popBaseCreations(IStore _store, bytes32 creationId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.popFromField(_tableId, _keyTuple, 3, 1);
  }

  /** Update a slice of baseCreations at `_index` */
  function updateBaseCreations(bytes32 creationId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.updateInField(_tableId, _keyTuple, 3, _index * 1, bytes((_slice)));
  }

  /** Update a slice of baseCreations (using the specified store) at `_index` */
  function updateBaseCreations(IStore _store, bytes32 creationId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.updateInField(_tableId, _keyTuple, 3, _index * 1, bytes((_slice)));
  }

  /** Get metadata */
  function getMetadata(bytes32 creationId) internal view returns (bytes memory metadata) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4);
    return (bytes(_blob));
  }

  /** Get metadata (using the specified store) */
  function getMetadata(IStore _store, bytes32 creationId) internal view returns (bytes memory metadata) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4);
    return (bytes(_blob));
  }

  /** Set metadata */
  function setMetadata(bytes32 creationId, bytes memory metadata) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.setField(_tableId, _keyTuple, 4, bytes((metadata)));
  }

  /** Set metadata (using the specified store) */
  function setMetadata(IStore _store, bytes32 creationId, bytes memory metadata) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.setField(_tableId, _keyTuple, 4, bytes((metadata)));
  }

  /** Get the length of metadata */
  function lengthMetadata(bytes32 creationId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 4, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of metadata (using the specified store) */
  function lengthMetadata(IStore _store, bytes32 creationId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 4, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of metadata (unchecked, returns invalid data if index overflows) */
  function getItemMetadata(bytes32 creationId, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 4, getSchema(), _index * 1, (_index + 1) * 1);
    return (bytes(_blob));
  }

  /** Get an item of metadata (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemMetadata(IStore _store, bytes32 creationId, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 4, getSchema(), _index * 1, (_index + 1) * 1);
    return (bytes(_blob));
  }

  /** Push a slice to metadata */
  function pushMetadata(bytes32 creationId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.pushToField(_tableId, _keyTuple, 4, bytes((_slice)));
  }

  /** Push a slice to metadata (using the specified store) */
  function pushMetadata(IStore _store, bytes32 creationId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.pushToField(_tableId, _keyTuple, 4, bytes((_slice)));
  }

  /** Pop a slice from metadata */
  function popMetadata(bytes32 creationId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.popFromField(_tableId, _keyTuple, 4, 1);
  }

  /** Pop a slice from metadata (using the specified store) */
  function popMetadata(IStore _store, bytes32 creationId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.popFromField(_tableId, _keyTuple, 4, 1);
  }

  /** Update a slice of metadata at `_index` */
  function updateMetadata(bytes32 creationId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.updateInField(_tableId, _keyTuple, 4, _index * 1, bytes((_slice)));
  }

  /** Update a slice of metadata (using the specified store) at `_index` */
  function updateMetadata(IStore _store, bytes32 creationId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.updateInField(_tableId, _keyTuple, 4, _index * 1, bytes((_slice)));
  }

  /** Get the full data */
  function get(bytes32 creationId) internal view returns (CreationRegistryData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 creationId) internal view returns (CreationRegistryData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 creationId,
    uint32 numVoxels,
    bytes memory bodyTypes,
    bytes memory relativePositions,
    bytes memory baseCreations,
    bytes memory metadata
  ) internal {
    bytes memory _data = encode(numVoxels, bodyTypes, relativePositions, baseCreations, metadata);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 creationId,
    uint32 numVoxels,
    bytes memory bodyTypes,
    bytes memory relativePositions,
    bytes memory baseCreations,
    bytes memory metadata
  ) internal {
    bytes memory _data = encode(numVoxels, bodyTypes, relativePositions, baseCreations, metadata);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 creationId, CreationRegistryData memory _table) internal {
    set(
      creationId,
      _table.numVoxels,
      _table.bodyTypes,
      _table.relativePositions,
      _table.baseCreations,
      _table.metadata
    );
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 creationId, CreationRegistryData memory _table) internal {
    set(
      _store,
      creationId,
      _table.numVoxels,
      _table.bodyTypes,
      _table.relativePositions,
      _table.baseCreations,
      _table.metadata
    );
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (CreationRegistryData memory _table) {
    // 4 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 4));

    _table.numVoxels = (uint32(Bytes.slice4(_blob, 0)));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 4) {
      uint256 _start;
      // skip static data length + dynamic lengths word
      uint256 _end = 36;

      _start = _end;
      _end += _encodedLengths.atIndex(0);
      _table.bodyTypes = (bytes(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

      _start = _end;
      _end += _encodedLengths.atIndex(1);
      _table.relativePositions = (bytes(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

      _start = _end;
      _end += _encodedLengths.atIndex(2);
      _table.baseCreations = (bytes(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

      _start = _end;
      _end += _encodedLengths.atIndex(3);
      _table.metadata = (bytes(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    uint32 numVoxels,
    bytes memory bodyTypes,
    bytes memory relativePositions,
    bytes memory baseCreations,
    bytes memory metadata
  ) internal pure returns (bytes memory) {
    uint40[] memory _counters = new uint40[](4);
    _counters[0] = uint40(bytes(bodyTypes).length);
    _counters[1] = uint40(bytes(relativePositions).length);
    _counters[2] = uint40(bytes(baseCreations).length);
    _counters[3] = uint40(bytes(metadata).length);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    return
      abi.encodePacked(
        numVoxels,
        _encodedLengths.unwrap(),
        bytes((bodyTypes)),
        bytes((relativePositions)),
        bytes((baseCreations)),
        bytes((metadata))
      );
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 creationId) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 creationId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 creationId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
