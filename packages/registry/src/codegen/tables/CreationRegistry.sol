// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("CreationRegistry")));
bytes32 constant CreationRegistryTableId = _tableId;

struct CreationRegistryData {
  address creator;
  uint256 numSpawns;
  uint32 numVoxels;
  bytes voxelTypes;
  bytes relativePositions;
  string name;
  string description;
  bytes baseCreations;
}

library CreationRegistry {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](8);
    _schema[0] = SchemaType.ADDRESS;
    _schema[1] = SchemaType.UINT256;
    _schema[2] = SchemaType.UINT32;
    _schema[3] = SchemaType.BYTES;
    _schema[4] = SchemaType.BYTES;
    _schema[5] = SchemaType.STRING;
    _schema[6] = SchemaType.STRING;
    _schema[7] = SchemaType.BYTES;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](8);
    _fieldNames[0] = "creator";
    _fieldNames[1] = "numSpawns";
    _fieldNames[2] = "numVoxels";
    _fieldNames[3] = "voxelTypes";
    _fieldNames[4] = "relativePositions";
    _fieldNames[5] = "name";
    _fieldNames[6] = "description";
    _fieldNames[7] = "baseCreations";
    return ("CreationRegistry", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get creator */
  function getCreator(bytes32 creationId) internal view returns (address creator) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Get creator (using the specified store) */
  function getCreator(IStore _store, bytes32 creationId) internal view returns (address creator) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Set creator */
  function setCreator(bytes32 creationId, address creator) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((creator)));
  }

  /** Set creator (using the specified store) */
  function setCreator(IStore _store, bytes32 creationId, address creator) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((creator)));
  }

  /** Get numSpawns */
  function getNumSpawns(bytes32 creationId) internal view returns (uint256 numSpawns) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get numSpawns (using the specified store) */
  function getNumSpawns(IStore _store, bytes32 creationId) internal view returns (uint256 numSpawns) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set numSpawns */
  function setNumSpawns(bytes32 creationId, uint256 numSpawns) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((numSpawns)));
  }

  /** Set numSpawns (using the specified store) */
  function setNumSpawns(IStore _store, bytes32 creationId, uint256 numSpawns) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((numSpawns)));
  }

  /** Get numVoxels */
  function getNumVoxels(bytes32 creationId) internal view returns (uint32 numVoxels) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get numVoxels (using the specified store) */
  function getNumVoxels(IStore _store, bytes32 creationId) internal view returns (uint32 numVoxels) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set numVoxels */
  function setNumVoxels(bytes32 creationId, uint32 numVoxels) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((numVoxels)));
  }

  /** Set numVoxels (using the specified store) */
  function setNumVoxels(IStore _store, bytes32 creationId, uint32 numVoxels) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((numVoxels)));
  }

  /** Get voxelTypes */
  function getVoxelTypes(bytes32 creationId) internal view returns (bytes memory voxelTypes) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (bytes(_blob));
  }

  /** Get voxelTypes (using the specified store) */
  function getVoxelTypes(IStore _store, bytes32 creationId) internal view returns (bytes memory voxelTypes) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (bytes(_blob));
  }

  /** Set voxelTypes */
  function setVoxelTypes(bytes32 creationId, bytes memory voxelTypes) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.setField(_tableId, _keyTuple, 3, bytes((voxelTypes)));
  }

  /** Set voxelTypes (using the specified store) */
  function setVoxelTypes(IStore _store, bytes32 creationId, bytes memory voxelTypes) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.setField(_tableId, _keyTuple, 3, bytes((voxelTypes)));
  }

  /** Get the length of voxelTypes */
  function lengthVoxelTypes(bytes32 creationId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 3, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of voxelTypes (using the specified store) */
  function lengthVoxelTypes(IStore _store, bytes32 creationId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 3, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of voxelTypes (unchecked, returns invalid data if index overflows) */
  function getItemVoxelTypes(bytes32 creationId, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 3, getSchema(), _index * 1, (_index + 1) * 1);
    return (bytes(_blob));
  }

  /** Get an item of voxelTypes (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemVoxelTypes(IStore _store, bytes32 creationId, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 3, getSchema(), _index * 1, (_index + 1) * 1);
    return (bytes(_blob));
  }

  /** Push a slice to voxelTypes */
  function pushVoxelTypes(bytes32 creationId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.pushToField(_tableId, _keyTuple, 3, bytes((_slice)));
  }

  /** Push a slice to voxelTypes (using the specified store) */
  function pushVoxelTypes(IStore _store, bytes32 creationId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.pushToField(_tableId, _keyTuple, 3, bytes((_slice)));
  }

  /** Pop a slice from voxelTypes */
  function popVoxelTypes(bytes32 creationId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.popFromField(_tableId, _keyTuple, 3, 1);
  }

  /** Pop a slice from voxelTypes (using the specified store) */
  function popVoxelTypes(IStore _store, bytes32 creationId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.popFromField(_tableId, _keyTuple, 3, 1);
  }

  /** Update a slice of voxelTypes at `_index` */
  function updateVoxelTypes(bytes32 creationId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.updateInField(_tableId, _keyTuple, 3, _index * 1, bytes((_slice)));
  }

  /** Update a slice of voxelTypes (using the specified store) at `_index` */
  function updateVoxelTypes(IStore _store, bytes32 creationId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.updateInField(_tableId, _keyTuple, 3, _index * 1, bytes((_slice)));
  }

  /** Get relativePositions */
  function getRelativePositions(bytes32 creationId) internal view returns (bytes memory relativePositions) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4);
    return (bytes(_blob));
  }

  /** Get relativePositions (using the specified store) */
  function getRelativePositions(
    IStore _store,
    bytes32 creationId
  ) internal view returns (bytes memory relativePositions) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4);
    return (bytes(_blob));
  }

  /** Set relativePositions */
  function setRelativePositions(bytes32 creationId, bytes memory relativePositions) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.setField(_tableId, _keyTuple, 4, bytes((relativePositions)));
  }

  /** Set relativePositions (using the specified store) */
  function setRelativePositions(IStore _store, bytes32 creationId, bytes memory relativePositions) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.setField(_tableId, _keyTuple, 4, bytes((relativePositions)));
  }

  /** Get the length of relativePositions */
  function lengthRelativePositions(bytes32 creationId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 4, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of relativePositions (using the specified store) */
  function lengthRelativePositions(IStore _store, bytes32 creationId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 4, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of relativePositions (unchecked, returns invalid data if index overflows) */
  function getItemRelativePositions(bytes32 creationId, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 4, getSchema(), _index * 1, (_index + 1) * 1);
    return (bytes(_blob));
  }

  /** Get an item of relativePositions (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemRelativePositions(
    IStore _store,
    bytes32 creationId,
    uint256 _index
  ) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 4, getSchema(), _index * 1, (_index + 1) * 1);
    return (bytes(_blob));
  }

  /** Push a slice to relativePositions */
  function pushRelativePositions(bytes32 creationId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.pushToField(_tableId, _keyTuple, 4, bytes((_slice)));
  }

  /** Push a slice to relativePositions (using the specified store) */
  function pushRelativePositions(IStore _store, bytes32 creationId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.pushToField(_tableId, _keyTuple, 4, bytes((_slice)));
  }

  /** Pop a slice from relativePositions */
  function popRelativePositions(bytes32 creationId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.popFromField(_tableId, _keyTuple, 4, 1);
  }

  /** Pop a slice from relativePositions (using the specified store) */
  function popRelativePositions(IStore _store, bytes32 creationId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.popFromField(_tableId, _keyTuple, 4, 1);
  }

  /** Update a slice of relativePositions at `_index` */
  function updateRelativePositions(bytes32 creationId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.updateInField(_tableId, _keyTuple, 4, _index * 1, bytes((_slice)));
  }

  /** Update a slice of relativePositions (using the specified store) at `_index` */
  function updateRelativePositions(IStore _store, bytes32 creationId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.updateInField(_tableId, _keyTuple, 4, _index * 1, bytes((_slice)));
  }

  /** Get name */
  function getName(bytes32 creationId) internal view returns (string memory name) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 5);
    return (string(_blob));
  }

  /** Get name (using the specified store) */
  function getName(IStore _store, bytes32 creationId) internal view returns (string memory name) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 5);
    return (string(_blob));
  }

  /** Set name */
  function setName(bytes32 creationId, string memory name) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.setField(_tableId, _keyTuple, 5, bytes((name)));
  }

  /** Set name (using the specified store) */
  function setName(IStore _store, bytes32 creationId, string memory name) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.setField(_tableId, _keyTuple, 5, bytes((name)));
  }

  /** Get the length of name */
  function lengthName(bytes32 creationId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 5, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of name (using the specified store) */
  function lengthName(IStore _store, bytes32 creationId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 5, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of name (unchecked, returns invalid data if index overflows) */
  function getItemName(bytes32 creationId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 5, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Get an item of name (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemName(IStore _store, bytes32 creationId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 5, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Push a slice to name */
  function pushName(bytes32 creationId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.pushToField(_tableId, _keyTuple, 5, bytes((_slice)));
  }

  /** Push a slice to name (using the specified store) */
  function pushName(IStore _store, bytes32 creationId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.pushToField(_tableId, _keyTuple, 5, bytes((_slice)));
  }

  /** Pop a slice from name */
  function popName(bytes32 creationId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.popFromField(_tableId, _keyTuple, 5, 1);
  }

  /** Pop a slice from name (using the specified store) */
  function popName(IStore _store, bytes32 creationId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.popFromField(_tableId, _keyTuple, 5, 1);
  }

  /** Update a slice of name at `_index` */
  function updateName(bytes32 creationId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.updateInField(_tableId, _keyTuple, 5, _index * 1, bytes((_slice)));
  }

  /** Update a slice of name (using the specified store) at `_index` */
  function updateName(IStore _store, bytes32 creationId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.updateInField(_tableId, _keyTuple, 5, _index * 1, bytes((_slice)));
  }

  /** Get description */
  function getDescription(bytes32 creationId) internal view returns (string memory description) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 6);
    return (string(_blob));
  }

  /** Get description (using the specified store) */
  function getDescription(IStore _store, bytes32 creationId) internal view returns (string memory description) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 6);
    return (string(_blob));
  }

  /** Set description */
  function setDescription(bytes32 creationId, string memory description) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.setField(_tableId, _keyTuple, 6, bytes((description)));
  }

  /** Set description (using the specified store) */
  function setDescription(IStore _store, bytes32 creationId, string memory description) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.setField(_tableId, _keyTuple, 6, bytes((description)));
  }

  /** Get the length of description */
  function lengthDescription(bytes32 creationId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 6, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of description (using the specified store) */
  function lengthDescription(IStore _store, bytes32 creationId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 6, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of description (unchecked, returns invalid data if index overflows) */
  function getItemDescription(bytes32 creationId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 6, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Get an item of description (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemDescription(IStore _store, bytes32 creationId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 6, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Push a slice to description */
  function pushDescription(bytes32 creationId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.pushToField(_tableId, _keyTuple, 6, bytes((_slice)));
  }

  /** Push a slice to description (using the specified store) */
  function pushDescription(IStore _store, bytes32 creationId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.pushToField(_tableId, _keyTuple, 6, bytes((_slice)));
  }

  /** Pop a slice from description */
  function popDescription(bytes32 creationId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.popFromField(_tableId, _keyTuple, 6, 1);
  }

  /** Pop a slice from description (using the specified store) */
  function popDescription(IStore _store, bytes32 creationId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.popFromField(_tableId, _keyTuple, 6, 1);
  }

  /** Update a slice of description at `_index` */
  function updateDescription(bytes32 creationId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.updateInField(_tableId, _keyTuple, 6, _index * 1, bytes((_slice)));
  }

  /** Update a slice of description (using the specified store) at `_index` */
  function updateDescription(IStore _store, bytes32 creationId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.updateInField(_tableId, _keyTuple, 6, _index * 1, bytes((_slice)));
  }

  /** Get baseCreations */
  function getBaseCreations(bytes32 creationId) internal view returns (bytes memory baseCreations) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 7);
    return (bytes(_blob));
  }

  /** Get baseCreations (using the specified store) */
  function getBaseCreations(IStore _store, bytes32 creationId) internal view returns (bytes memory baseCreations) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 7);
    return (bytes(_blob));
  }

  /** Set baseCreations */
  function setBaseCreations(bytes32 creationId, bytes memory baseCreations) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.setField(_tableId, _keyTuple, 7, bytes((baseCreations)));
  }

  /** Set baseCreations (using the specified store) */
  function setBaseCreations(IStore _store, bytes32 creationId, bytes memory baseCreations) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.setField(_tableId, _keyTuple, 7, bytes((baseCreations)));
  }

  /** Get the length of baseCreations */
  function lengthBaseCreations(bytes32 creationId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 7, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of baseCreations (using the specified store) */
  function lengthBaseCreations(IStore _store, bytes32 creationId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 7, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of baseCreations (unchecked, returns invalid data if index overflows) */
  function getItemBaseCreations(bytes32 creationId, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 7, getSchema(), _index * 1, (_index + 1) * 1);
    return (bytes(_blob));
  }

  /** Get an item of baseCreations (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemBaseCreations(
    IStore _store,
    bytes32 creationId,
    uint256 _index
  ) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 7, getSchema(), _index * 1, (_index + 1) * 1);
    return (bytes(_blob));
  }

  /** Push a slice to baseCreations */
  function pushBaseCreations(bytes32 creationId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.pushToField(_tableId, _keyTuple, 7, bytes((_slice)));
  }

  /** Push a slice to baseCreations (using the specified store) */
  function pushBaseCreations(IStore _store, bytes32 creationId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.pushToField(_tableId, _keyTuple, 7, bytes((_slice)));
  }

  /** Pop a slice from baseCreations */
  function popBaseCreations(bytes32 creationId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.popFromField(_tableId, _keyTuple, 7, 1);
  }

  /** Pop a slice from baseCreations (using the specified store) */
  function popBaseCreations(IStore _store, bytes32 creationId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.popFromField(_tableId, _keyTuple, 7, 1);
  }

  /** Update a slice of baseCreations at `_index` */
  function updateBaseCreations(bytes32 creationId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.updateInField(_tableId, _keyTuple, 7, _index * 1, bytes((_slice)));
  }

  /** Update a slice of baseCreations (using the specified store) at `_index` */
  function updateBaseCreations(IStore _store, bytes32 creationId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.updateInField(_tableId, _keyTuple, 7, _index * 1, bytes((_slice)));
  }

  /** Get the full data */
  function get(bytes32 creationId) internal view returns (CreationRegistryData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 creationId) internal view returns (CreationRegistryData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 creationId,
    address creator,
    uint256 numSpawns,
    uint32 numVoxels,
    bytes memory voxelTypes,
    bytes memory relativePositions,
    string memory name,
    string memory description,
    bytes memory baseCreations
  ) internal {
    bytes memory _data = encode(
      creator,
      numSpawns,
      numVoxels,
      voxelTypes,
      relativePositions,
      name,
      description,
      baseCreations
    );

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 creationId,
    address creator,
    uint256 numSpawns,
    uint32 numVoxels,
    bytes memory voxelTypes,
    bytes memory relativePositions,
    string memory name,
    string memory description,
    bytes memory baseCreations
  ) internal {
    bytes memory _data = encode(
      creator,
      numSpawns,
      numVoxels,
      voxelTypes,
      relativePositions,
      name,
      description,
      baseCreations
    );

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 creationId, CreationRegistryData memory _table) internal {
    set(
      creationId,
      _table.creator,
      _table.numSpawns,
      _table.numVoxels,
      _table.voxelTypes,
      _table.relativePositions,
      _table.name,
      _table.description,
      _table.baseCreations
    );
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 creationId, CreationRegistryData memory _table) internal {
    set(
      _store,
      creationId,
      _table.creator,
      _table.numSpawns,
      _table.numVoxels,
      _table.voxelTypes,
      _table.relativePositions,
      _table.name,
      _table.description,
      _table.baseCreations
    );
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (CreationRegistryData memory _table) {
    // 56 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 56));

    _table.creator = (address(Bytes.slice20(_blob, 0)));

    _table.numSpawns = (uint256(Bytes.slice32(_blob, 20)));

    _table.numVoxels = (uint32(Bytes.slice4(_blob, 52)));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 56) {
      uint256 _start;
      // skip static data length + dynamic lengths word
      uint256 _end = 88;

      _start = _end;
      _end += _encodedLengths.atIndex(0);
      _table.voxelTypes = (bytes(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

      _start = _end;
      _end += _encodedLengths.atIndex(1);
      _table.relativePositions = (bytes(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

      _start = _end;
      _end += _encodedLengths.atIndex(2);
      _table.name = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

      _start = _end;
      _end += _encodedLengths.atIndex(3);
      _table.description = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

      _start = _end;
      _end += _encodedLengths.atIndex(4);
      _table.baseCreations = (bytes(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    address creator,
    uint256 numSpawns,
    uint32 numVoxels,
    bytes memory voxelTypes,
    bytes memory relativePositions,
    string memory name,
    string memory description,
    bytes memory baseCreations
  ) internal pure returns (bytes memory) {
    uint40[] memory _counters = new uint40[](5);
    _counters[0] = uint40(bytes(voxelTypes).length);
    _counters[1] = uint40(bytes(relativePositions).length);
    _counters[2] = uint40(bytes(name).length);
    _counters[3] = uint40(bytes(description).length);
    _counters[4] = uint40(bytes(baseCreations).length);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    return
      abi.encodePacked(
        creator,
        numSpawns,
        numVoxels,
        _encodedLengths.unwrap(),
        bytes((voxelTypes)),
        bytes((relativePositions)),
        bytes((name)),
        bytes((description)),
        bytes((baseCreations))
      );
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 creationId) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 creationId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 creationId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = creationId;

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
