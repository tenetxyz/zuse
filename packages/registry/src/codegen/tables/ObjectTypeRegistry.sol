// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("ObjectTypeRegist")));
bytes32 constant ObjectTypeRegistryTableId = _tableId;

struct ObjectTypeRegistryData {
  address creator;
  address contractAddress;
  bytes4 enterWorldSelector;
  bytes4 exitWorldSelector;
  bytes4 eventHandlerSelector;
  bytes4 neighbourEventHandlerSelector;
  uint8 stackable;
  uint16 maxUses;
  uint16 damage;
  string name;
}

library ObjectTypeRegistry {
  /** Get the table's key schema */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's value schema */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](10);
    _schema[0] = SchemaType.ADDRESS;
    _schema[1] = SchemaType.ADDRESS;
    _schema[2] = SchemaType.BYTES4;
    _schema[3] = SchemaType.BYTES4;
    _schema[4] = SchemaType.BYTES4;
    _schema[5] = SchemaType.BYTES4;
    _schema[6] = SchemaType.UINT8;
    _schema[7] = SchemaType.UINT16;
    _schema[8] = SchemaType.UINT16;
    _schema[9] = SchemaType.STRING;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's key names */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "objectTypeId";
  }

  /** Get the table's field names */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](10);
    fieldNames[0] = "creator";
    fieldNames[1] = "contractAddress";
    fieldNames[2] = "enterWorldSelector";
    fieldNames[3] = "exitWorldSelector";
    fieldNames[4] = "eventHandlerSelector";
    fieldNames[5] = "neighbourEventHandlerSelector";
    fieldNames[6] = "stackable";
    fieldNames[7] = "maxUses";
    fieldNames[8] = "damage";
    fieldNames[9] = "name";
  }

  /** Register the table's key schema, value schema, key names and value names */
  function register() internal {
    StoreSwitch.registerTable(_tableId, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Register the table's key schema, value schema, key names and value names (using the specified store) */
  function register(IStore _store) internal {
    _store.registerTable(_tableId, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Get creator */
  function getCreator(bytes32 objectTypeId) internal view returns (address creator) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0, getValueSchema());
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Get creator (using the specified store) */
  function getCreator(IStore _store, bytes32 objectTypeId) internal view returns (address creator) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0, getValueSchema());
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Set creator */
  function setCreator(bytes32 objectTypeId, address creator) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((creator)), getValueSchema());
  }

  /** Set creator (using the specified store) */
  function setCreator(IStore _store, bytes32 objectTypeId, address creator) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((creator)), getValueSchema());
  }

  /** Get contractAddress */
  function getContractAddress(bytes32 objectTypeId) internal view returns (address contractAddress) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1, getValueSchema());
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Get contractAddress (using the specified store) */
  function getContractAddress(IStore _store, bytes32 objectTypeId) internal view returns (address contractAddress) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1, getValueSchema());
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Set contractAddress */
  function setContractAddress(bytes32 objectTypeId, address contractAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((contractAddress)), getValueSchema());
  }

  /** Set contractAddress (using the specified store) */
  function setContractAddress(IStore _store, bytes32 objectTypeId, address contractAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((contractAddress)), getValueSchema());
  }

  /** Get enterWorldSelector */
  function getEnterWorldSelector(bytes32 objectTypeId) internal view returns (bytes4 enterWorldSelector) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2, getValueSchema());
    return (Bytes.slice4(_blob, 0));
  }

  /** Get enterWorldSelector (using the specified store) */
  function getEnterWorldSelector(
    IStore _store,
    bytes32 objectTypeId
  ) internal view returns (bytes4 enterWorldSelector) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2, getValueSchema());
    return (Bytes.slice4(_blob, 0));
  }

  /** Set enterWorldSelector */
  function setEnterWorldSelector(bytes32 objectTypeId, bytes4 enterWorldSelector) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((enterWorldSelector)), getValueSchema());
  }

  /** Set enterWorldSelector (using the specified store) */
  function setEnterWorldSelector(IStore _store, bytes32 objectTypeId, bytes4 enterWorldSelector) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((enterWorldSelector)), getValueSchema());
  }

  /** Get exitWorldSelector */
  function getExitWorldSelector(bytes32 objectTypeId) internal view returns (bytes4 exitWorldSelector) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3, getValueSchema());
    return (Bytes.slice4(_blob, 0));
  }

  /** Get exitWorldSelector (using the specified store) */
  function getExitWorldSelector(IStore _store, bytes32 objectTypeId) internal view returns (bytes4 exitWorldSelector) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3, getValueSchema());
    return (Bytes.slice4(_blob, 0));
  }

  /** Set exitWorldSelector */
  function setExitWorldSelector(bytes32 objectTypeId, bytes4 exitWorldSelector) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((exitWorldSelector)), getValueSchema());
  }

  /** Set exitWorldSelector (using the specified store) */
  function setExitWorldSelector(IStore _store, bytes32 objectTypeId, bytes4 exitWorldSelector) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((exitWorldSelector)), getValueSchema());
  }

  /** Get eventHandlerSelector */
  function getEventHandlerSelector(bytes32 objectTypeId) internal view returns (bytes4 eventHandlerSelector) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4, getValueSchema());
    return (Bytes.slice4(_blob, 0));
  }

  /** Get eventHandlerSelector (using the specified store) */
  function getEventHandlerSelector(
    IStore _store,
    bytes32 objectTypeId
  ) internal view returns (bytes4 eventHandlerSelector) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4, getValueSchema());
    return (Bytes.slice4(_blob, 0));
  }

  /** Set eventHandlerSelector */
  function setEventHandlerSelector(bytes32 objectTypeId, bytes4 eventHandlerSelector) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    StoreSwitch.setField(_tableId, _keyTuple, 4, abi.encodePacked((eventHandlerSelector)), getValueSchema());
  }

  /** Set eventHandlerSelector (using the specified store) */
  function setEventHandlerSelector(IStore _store, bytes32 objectTypeId, bytes4 eventHandlerSelector) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    _store.setField(_tableId, _keyTuple, 4, abi.encodePacked((eventHandlerSelector)), getValueSchema());
  }

  /** Get neighbourEventHandlerSelector */
  function getNeighbourEventHandlerSelector(
    bytes32 objectTypeId
  ) internal view returns (bytes4 neighbourEventHandlerSelector) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 5, getValueSchema());
    return (Bytes.slice4(_blob, 0));
  }

  /** Get neighbourEventHandlerSelector (using the specified store) */
  function getNeighbourEventHandlerSelector(
    IStore _store,
    bytes32 objectTypeId
  ) internal view returns (bytes4 neighbourEventHandlerSelector) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 5, getValueSchema());
    return (Bytes.slice4(_blob, 0));
  }

  /** Set neighbourEventHandlerSelector */
  function setNeighbourEventHandlerSelector(bytes32 objectTypeId, bytes4 neighbourEventHandlerSelector) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    StoreSwitch.setField(_tableId, _keyTuple, 5, abi.encodePacked((neighbourEventHandlerSelector)), getValueSchema());
  }

  /** Set neighbourEventHandlerSelector (using the specified store) */
  function setNeighbourEventHandlerSelector(
    IStore _store,
    bytes32 objectTypeId,
    bytes4 neighbourEventHandlerSelector
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    _store.setField(_tableId, _keyTuple, 5, abi.encodePacked((neighbourEventHandlerSelector)), getValueSchema());
  }

  /** Get stackable */
  function getStackable(bytes32 objectTypeId) internal view returns (uint8 stackable) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 6, getValueSchema());
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get stackable (using the specified store) */
  function getStackable(IStore _store, bytes32 objectTypeId) internal view returns (uint8 stackable) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 6, getValueSchema());
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set stackable */
  function setStackable(bytes32 objectTypeId, uint8 stackable) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    StoreSwitch.setField(_tableId, _keyTuple, 6, abi.encodePacked((stackable)), getValueSchema());
  }

  /** Set stackable (using the specified store) */
  function setStackable(IStore _store, bytes32 objectTypeId, uint8 stackable) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    _store.setField(_tableId, _keyTuple, 6, abi.encodePacked((stackable)), getValueSchema());
  }

  /** Get maxUses */
  function getMaxUses(bytes32 objectTypeId) internal view returns (uint16 maxUses) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 7, getValueSchema());
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Get maxUses (using the specified store) */
  function getMaxUses(IStore _store, bytes32 objectTypeId) internal view returns (uint16 maxUses) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 7, getValueSchema());
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Set maxUses */
  function setMaxUses(bytes32 objectTypeId, uint16 maxUses) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    StoreSwitch.setField(_tableId, _keyTuple, 7, abi.encodePacked((maxUses)), getValueSchema());
  }

  /** Set maxUses (using the specified store) */
  function setMaxUses(IStore _store, bytes32 objectTypeId, uint16 maxUses) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    _store.setField(_tableId, _keyTuple, 7, abi.encodePacked((maxUses)), getValueSchema());
  }

  /** Get damage */
  function getDamage(bytes32 objectTypeId) internal view returns (uint16 damage) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 8, getValueSchema());
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Get damage (using the specified store) */
  function getDamage(IStore _store, bytes32 objectTypeId) internal view returns (uint16 damage) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 8, getValueSchema());
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Set damage */
  function setDamage(bytes32 objectTypeId, uint16 damage) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    StoreSwitch.setField(_tableId, _keyTuple, 8, abi.encodePacked((damage)), getValueSchema());
  }

  /** Set damage (using the specified store) */
  function setDamage(IStore _store, bytes32 objectTypeId, uint16 damage) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    _store.setField(_tableId, _keyTuple, 8, abi.encodePacked((damage)), getValueSchema());
  }

  /** Get name */
  function getName(bytes32 objectTypeId) internal view returns (string memory name) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 9, getValueSchema());
    return (string(_blob));
  }

  /** Get name (using the specified store) */
  function getName(IStore _store, bytes32 objectTypeId) internal view returns (string memory name) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 9, getValueSchema());
    return (string(_blob));
  }

  /** Set name */
  function setName(bytes32 objectTypeId, string memory name) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    StoreSwitch.setField(_tableId, _keyTuple, 9, bytes((name)), getValueSchema());
  }

  /** Set name (using the specified store) */
  function setName(IStore _store, bytes32 objectTypeId, string memory name) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    _store.setField(_tableId, _keyTuple, 9, bytes((name)), getValueSchema());
  }

  /** Get the length of name */
  function lengthName(bytes32 objectTypeId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 9, getValueSchema());
    unchecked {
      return _byteLength / 1;
    }
  }

  /** Get the length of name (using the specified store) */
  function lengthName(IStore _store, bytes32 objectTypeId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 9, getValueSchema());
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * Get an item of name
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemName(bytes32 objectTypeId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    unchecked {
      bytes memory _blob = StoreSwitch.getFieldSlice(
        _tableId,
        _keyTuple,
        9,
        getValueSchema(),
        _index * 1,
        (_index + 1) * 1
      );
      return (string(_blob));
    }
  }

  /**
   * Get an item of name (using the specified store)
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemName(IStore _store, bytes32 objectTypeId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    unchecked {
      bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 9, getValueSchema(), _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /** Push a slice to name */
  function pushName(bytes32 objectTypeId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    StoreSwitch.pushToField(_tableId, _keyTuple, 9, bytes((_slice)), getValueSchema());
  }

  /** Push a slice to name (using the specified store) */
  function pushName(IStore _store, bytes32 objectTypeId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    _store.pushToField(_tableId, _keyTuple, 9, bytes((_slice)), getValueSchema());
  }

  /** Pop a slice from name */
  function popName(bytes32 objectTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    StoreSwitch.popFromField(_tableId, _keyTuple, 9, 1, getValueSchema());
  }

  /** Pop a slice from name (using the specified store) */
  function popName(IStore _store, bytes32 objectTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    _store.popFromField(_tableId, _keyTuple, 9, 1, getValueSchema());
  }

  /**
   * Update a slice of name at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateName(bytes32 objectTypeId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    unchecked {
      StoreSwitch.updateInField(_tableId, _keyTuple, 9, _index * 1, bytes((_slice)), getValueSchema());
    }
  }

  /**
   * Update a slice of name (using the specified store) at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateName(IStore _store, bytes32 objectTypeId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    unchecked {
      _store.updateInField(_tableId, _keyTuple, 9, _index * 1, bytes((_slice)), getValueSchema());
    }
  }

  /** Get the full data */
  function get(bytes32 objectTypeId) internal view returns (ObjectTypeRegistryData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getValueSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 objectTypeId) internal view returns (ObjectTypeRegistryData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getValueSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 objectTypeId,
    address creator,
    address contractAddress,
    bytes4 enterWorldSelector,
    bytes4 exitWorldSelector,
    bytes4 eventHandlerSelector,
    bytes4 neighbourEventHandlerSelector,
    uint8 stackable,
    uint16 maxUses,
    uint16 damage,
    string memory name
  ) internal {
    bytes memory _data = encode(
      creator,
      contractAddress,
      enterWorldSelector,
      exitWorldSelector,
      eventHandlerSelector,
      neighbourEventHandlerSelector,
      stackable,
      maxUses,
      damage,
      name
    );

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _data, getValueSchema());
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 objectTypeId,
    address creator,
    address contractAddress,
    bytes4 enterWorldSelector,
    bytes4 exitWorldSelector,
    bytes4 eventHandlerSelector,
    bytes4 neighbourEventHandlerSelector,
    uint8 stackable,
    uint16 maxUses,
    uint16 damage,
    string memory name
  ) internal {
    bytes memory _data = encode(
      creator,
      contractAddress,
      enterWorldSelector,
      exitWorldSelector,
      eventHandlerSelector,
      neighbourEventHandlerSelector,
      stackable,
      maxUses,
      damage,
      name
    );

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    _store.setRecord(_tableId, _keyTuple, _data, getValueSchema());
  }

  /** Set the full data using the data struct */
  function set(bytes32 objectTypeId, ObjectTypeRegistryData memory _table) internal {
    set(
      objectTypeId,
      _table.creator,
      _table.contractAddress,
      _table.enterWorldSelector,
      _table.exitWorldSelector,
      _table.eventHandlerSelector,
      _table.neighbourEventHandlerSelector,
      _table.stackable,
      _table.maxUses,
      _table.damage,
      _table.name
    );
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 objectTypeId, ObjectTypeRegistryData memory _table) internal {
    set(
      _store,
      objectTypeId,
      _table.creator,
      _table.contractAddress,
      _table.enterWorldSelector,
      _table.exitWorldSelector,
      _table.eventHandlerSelector,
      _table.neighbourEventHandlerSelector,
      _table.stackable,
      _table.maxUses,
      _table.damage,
      _table.name
    );
  }

  /**
   * Decode the tightly packed blob using this table's schema.
   * Undefined behaviour for invalid blobs.
   */
  function decode(bytes memory _blob) internal pure returns (ObjectTypeRegistryData memory _table) {
    // 61 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 61));

    _table.creator = (address(Bytes.slice20(_blob, 0)));

    _table.contractAddress = (address(Bytes.slice20(_blob, 20)));

    _table.enterWorldSelector = (Bytes.slice4(_blob, 40));

    _table.exitWorldSelector = (Bytes.slice4(_blob, 44));

    _table.eventHandlerSelector = (Bytes.slice4(_blob, 48));

    _table.neighbourEventHandlerSelector = (Bytes.slice4(_blob, 52));

    _table.stackable = (uint8(Bytes.slice1(_blob, 56)));

    _table.maxUses = (uint16(Bytes.slice2(_blob, 57)));

    _table.damage = (uint16(Bytes.slice2(_blob, 59)));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 61) {
      // skip static data length + dynamic lengths word
      uint256 _start = 93;
      uint256 _end;
      unchecked {
        _end = 93 + _encodedLengths.atIndex(0);
      }
      _table.name = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    address creator,
    address contractAddress,
    bytes4 enterWorldSelector,
    bytes4 exitWorldSelector,
    bytes4 eventHandlerSelector,
    bytes4 neighbourEventHandlerSelector,
    uint8 stackable,
    uint16 maxUses,
    uint16 damage,
    string memory name
  ) internal pure returns (bytes memory) {
    PackedCounter _encodedLengths;
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = PackedCounterLib.pack(bytes(name).length);
    }

    return
      abi.encodePacked(
        creator,
        contractAddress,
        enterWorldSelector,
        exitWorldSelector,
        eventHandlerSelector,
        neighbourEventHandlerSelector,
        stackable,
        maxUses,
        damage,
        _encodedLengths.unwrap(),
        bytes((name))
      );
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 objectTypeId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    return _keyTuple;
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 objectTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple, getValueSchema());
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 objectTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = objectTypeId;

    _store.deleteRecord(_tableId, _keyTuple, getValueSchema());
  }
}
