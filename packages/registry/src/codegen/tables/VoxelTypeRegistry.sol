// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("VoxelTypeRegistr")));
bytes32 constant VoxelTypeRegistryTableId = _tableId;

struct VoxelTypeRegistryData {
  uint32 scale;
  bytes32 previewVoxelVariantId;
  bytes32 baseVoxelTypeId;
  bytes selectors;
  bytes metadata;
  bytes32[] childVoxelTypeIds;
  bytes32[] schemaVoxelTypeIds;
  bytes componentDefs;
}

library VoxelTypeRegistry {
  /** Get the table's key schema */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's value schema */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](8);
    _schema[0] = SchemaType.UINT32;
    _schema[1] = SchemaType.BYTES32;
    _schema[2] = SchemaType.BYTES32;
    _schema[3] = SchemaType.BYTES;
    _schema[4] = SchemaType.BYTES;
    _schema[5] = SchemaType.BYTES32_ARRAY;
    _schema[6] = SchemaType.BYTES32_ARRAY;
    _schema[7] = SchemaType.BYTES;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's key names */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "voxelTypeId";
  }

  /** Get the table's field names */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](8);
    fieldNames[0] = "scale";
    fieldNames[1] = "previewVoxelVariantId";
    fieldNames[2] = "baseVoxelTypeId";
    fieldNames[3] = "selectors";
    fieldNames[4] = "metadata";
    fieldNames[5] = "childVoxelTypeIds";
    fieldNames[6] = "schemaVoxelTypeIds";
    fieldNames[7] = "componentDefs";
  }

  /** Register the table's key schema, value schema, key names and value names */
  function register() internal {
    StoreSwitch.registerTable(_tableId, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Register the table's key schema, value schema, key names and value names (using the specified store) */
  function register(IStore _store) internal {
    _store.registerTable(_tableId, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Get scale */
  function getScale(bytes32 voxelTypeId) internal view returns (uint32 scale) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0, getValueSchema());
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get scale (using the specified store) */
  function getScale(IStore _store, bytes32 voxelTypeId) internal view returns (uint32 scale) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0, getValueSchema());
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set scale */
  function setScale(bytes32 voxelTypeId, uint32 scale) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((scale)), getValueSchema());
  }

  /** Set scale (using the specified store) */
  function setScale(IStore _store, bytes32 voxelTypeId, uint32 scale) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((scale)), getValueSchema());
  }

  /** Get previewVoxelVariantId */
  function getPreviewVoxelVariantId(bytes32 voxelTypeId) internal view returns (bytes32 previewVoxelVariantId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1, getValueSchema());
    return (Bytes.slice32(_blob, 0));
  }

  /** Get previewVoxelVariantId (using the specified store) */
  function getPreviewVoxelVariantId(
    IStore _store,
    bytes32 voxelTypeId
  ) internal view returns (bytes32 previewVoxelVariantId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1, getValueSchema());
    return (Bytes.slice32(_blob, 0));
  }

  /** Set previewVoxelVariantId */
  function setPreviewVoxelVariantId(bytes32 voxelTypeId, bytes32 previewVoxelVariantId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((previewVoxelVariantId)), getValueSchema());
  }

  /** Set previewVoxelVariantId (using the specified store) */
  function setPreviewVoxelVariantId(IStore _store, bytes32 voxelTypeId, bytes32 previewVoxelVariantId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((previewVoxelVariantId)), getValueSchema());
  }

  /** Get baseVoxelTypeId */
  function getBaseVoxelTypeId(bytes32 voxelTypeId) internal view returns (bytes32 baseVoxelTypeId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2, getValueSchema());
    return (Bytes.slice32(_blob, 0));
  }

  /** Get baseVoxelTypeId (using the specified store) */
  function getBaseVoxelTypeId(IStore _store, bytes32 voxelTypeId) internal view returns (bytes32 baseVoxelTypeId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2, getValueSchema());
    return (Bytes.slice32(_blob, 0));
  }

  /** Set baseVoxelTypeId */
  function setBaseVoxelTypeId(bytes32 voxelTypeId, bytes32 baseVoxelTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((baseVoxelTypeId)), getValueSchema());
  }

  /** Set baseVoxelTypeId (using the specified store) */
  function setBaseVoxelTypeId(IStore _store, bytes32 voxelTypeId, bytes32 baseVoxelTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((baseVoxelTypeId)), getValueSchema());
  }

  /** Get selectors */
  function getSelectors(bytes32 voxelTypeId) internal view returns (bytes memory selectors) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3, getValueSchema());
    return (bytes(_blob));
  }

  /** Get selectors (using the specified store) */
  function getSelectors(IStore _store, bytes32 voxelTypeId) internal view returns (bytes memory selectors) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3, getValueSchema());
    return (bytes(_blob));
  }

  /** Set selectors */
  function setSelectors(bytes32 voxelTypeId, bytes memory selectors) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.setField(_tableId, _keyTuple, 3, bytes((selectors)), getValueSchema());
  }

  /** Set selectors (using the specified store) */
  function setSelectors(IStore _store, bytes32 voxelTypeId, bytes memory selectors) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.setField(_tableId, _keyTuple, 3, bytes((selectors)), getValueSchema());
  }

  /** Get the length of selectors */
  function lengthSelectors(bytes32 voxelTypeId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 3, getValueSchema());
    unchecked {
      return _byteLength / 1;
    }
  }

  /** Get the length of selectors (using the specified store) */
  function lengthSelectors(IStore _store, bytes32 voxelTypeId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 3, getValueSchema());
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * Get an item of selectors
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemSelectors(bytes32 voxelTypeId, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    unchecked {
      bytes memory _blob = StoreSwitch.getFieldSlice(
        _tableId,
        _keyTuple,
        3,
        getValueSchema(),
        _index * 1,
        (_index + 1) * 1
      );
      return (bytes(_blob));
    }
  }

  /**
   * Get an item of selectors (using the specified store)
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemSelectors(IStore _store, bytes32 voxelTypeId, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    unchecked {
      bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 3, getValueSchema(), _index * 1, (_index + 1) * 1);
      return (bytes(_blob));
    }
  }

  /** Push a slice to selectors */
  function pushSelectors(bytes32 voxelTypeId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.pushToField(_tableId, _keyTuple, 3, bytes((_slice)), getValueSchema());
  }

  /** Push a slice to selectors (using the specified store) */
  function pushSelectors(IStore _store, bytes32 voxelTypeId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.pushToField(_tableId, _keyTuple, 3, bytes((_slice)), getValueSchema());
  }

  /** Pop a slice from selectors */
  function popSelectors(bytes32 voxelTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.popFromField(_tableId, _keyTuple, 3, 1, getValueSchema());
  }

  /** Pop a slice from selectors (using the specified store) */
  function popSelectors(IStore _store, bytes32 voxelTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.popFromField(_tableId, _keyTuple, 3, 1, getValueSchema());
  }

  /**
   * Update a slice of selectors at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateSelectors(bytes32 voxelTypeId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    unchecked {
      StoreSwitch.updateInField(_tableId, _keyTuple, 3, _index * 1, bytes((_slice)), getValueSchema());
    }
  }

  /**
   * Update a slice of selectors (using the specified store) at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateSelectors(IStore _store, bytes32 voxelTypeId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    unchecked {
      _store.updateInField(_tableId, _keyTuple, 3, _index * 1, bytes((_slice)), getValueSchema());
    }
  }

  /** Get metadata */
  function getMetadata(bytes32 voxelTypeId) internal view returns (bytes memory metadata) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4, getValueSchema());
    return (bytes(_blob));
  }

  /** Get metadata (using the specified store) */
  function getMetadata(IStore _store, bytes32 voxelTypeId) internal view returns (bytes memory metadata) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4, getValueSchema());
    return (bytes(_blob));
  }

  /** Set metadata */
  function setMetadata(bytes32 voxelTypeId, bytes memory metadata) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.setField(_tableId, _keyTuple, 4, bytes((metadata)), getValueSchema());
  }

  /** Set metadata (using the specified store) */
  function setMetadata(IStore _store, bytes32 voxelTypeId, bytes memory metadata) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.setField(_tableId, _keyTuple, 4, bytes((metadata)), getValueSchema());
  }

  /** Get the length of metadata */
  function lengthMetadata(bytes32 voxelTypeId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 4, getValueSchema());
    unchecked {
      return _byteLength / 1;
    }
  }

  /** Get the length of metadata (using the specified store) */
  function lengthMetadata(IStore _store, bytes32 voxelTypeId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 4, getValueSchema());
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * Get an item of metadata
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemMetadata(bytes32 voxelTypeId, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    unchecked {
      bytes memory _blob = StoreSwitch.getFieldSlice(
        _tableId,
        _keyTuple,
        4,
        getValueSchema(),
        _index * 1,
        (_index + 1) * 1
      );
      return (bytes(_blob));
    }
  }

  /**
   * Get an item of metadata (using the specified store)
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemMetadata(IStore _store, bytes32 voxelTypeId, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    unchecked {
      bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 4, getValueSchema(), _index * 1, (_index + 1) * 1);
      return (bytes(_blob));
    }
  }

  /** Push a slice to metadata */
  function pushMetadata(bytes32 voxelTypeId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.pushToField(_tableId, _keyTuple, 4, bytes((_slice)), getValueSchema());
  }

  /** Push a slice to metadata (using the specified store) */
  function pushMetadata(IStore _store, bytes32 voxelTypeId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.pushToField(_tableId, _keyTuple, 4, bytes((_slice)), getValueSchema());
  }

  /** Pop a slice from metadata */
  function popMetadata(bytes32 voxelTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.popFromField(_tableId, _keyTuple, 4, 1, getValueSchema());
  }

  /** Pop a slice from metadata (using the specified store) */
  function popMetadata(IStore _store, bytes32 voxelTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.popFromField(_tableId, _keyTuple, 4, 1, getValueSchema());
  }

  /**
   * Update a slice of metadata at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateMetadata(bytes32 voxelTypeId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    unchecked {
      StoreSwitch.updateInField(_tableId, _keyTuple, 4, _index * 1, bytes((_slice)), getValueSchema());
    }
  }

  /**
   * Update a slice of metadata (using the specified store) at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateMetadata(IStore _store, bytes32 voxelTypeId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    unchecked {
      _store.updateInField(_tableId, _keyTuple, 4, _index * 1, bytes((_slice)), getValueSchema());
    }
  }

  /** Get childVoxelTypeIds */
  function getChildVoxelTypeIds(bytes32 voxelTypeId) internal view returns (bytes32[] memory childVoxelTypeIds) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 5, getValueSchema());
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes32());
  }

  /** Get childVoxelTypeIds (using the specified store) */
  function getChildVoxelTypeIds(
    IStore _store,
    bytes32 voxelTypeId
  ) internal view returns (bytes32[] memory childVoxelTypeIds) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 5, getValueSchema());
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes32());
  }

  /** Set childVoxelTypeIds */
  function setChildVoxelTypeIds(bytes32 voxelTypeId, bytes32[] memory childVoxelTypeIds) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.setField(_tableId, _keyTuple, 5, EncodeArray.encode((childVoxelTypeIds)), getValueSchema());
  }

  /** Set childVoxelTypeIds (using the specified store) */
  function setChildVoxelTypeIds(IStore _store, bytes32 voxelTypeId, bytes32[] memory childVoxelTypeIds) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.setField(_tableId, _keyTuple, 5, EncodeArray.encode((childVoxelTypeIds)), getValueSchema());
  }

  /** Get the length of childVoxelTypeIds */
  function lengthChildVoxelTypeIds(bytes32 voxelTypeId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 5, getValueSchema());
    unchecked {
      return _byteLength / 32;
    }
  }

  /** Get the length of childVoxelTypeIds (using the specified store) */
  function lengthChildVoxelTypeIds(IStore _store, bytes32 voxelTypeId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 5, getValueSchema());
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * Get an item of childVoxelTypeIds
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemChildVoxelTypeIds(bytes32 voxelTypeId, uint256 _index) internal view returns (bytes32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    unchecked {
      bytes memory _blob = StoreSwitch.getFieldSlice(
        _tableId,
        _keyTuple,
        5,
        getValueSchema(),
        _index * 32,
        (_index + 1) * 32
      );
      return (Bytes.slice32(_blob, 0));
    }
  }

  /**
   * Get an item of childVoxelTypeIds (using the specified store)
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemChildVoxelTypeIds(
    IStore _store,
    bytes32 voxelTypeId,
    uint256 _index
  ) internal view returns (bytes32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    unchecked {
      bytes memory _blob = _store.getFieldSlice(
        _tableId,
        _keyTuple,
        5,
        getValueSchema(),
        _index * 32,
        (_index + 1) * 32
      );
      return (Bytes.slice32(_blob, 0));
    }
  }

  /** Push an element to childVoxelTypeIds */
  function pushChildVoxelTypeIds(bytes32 voxelTypeId, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.pushToField(_tableId, _keyTuple, 5, abi.encodePacked((_element)), getValueSchema());
  }

  /** Push an element to childVoxelTypeIds (using the specified store) */
  function pushChildVoxelTypeIds(IStore _store, bytes32 voxelTypeId, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.pushToField(_tableId, _keyTuple, 5, abi.encodePacked((_element)), getValueSchema());
  }

  /** Pop an element from childVoxelTypeIds */
  function popChildVoxelTypeIds(bytes32 voxelTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.popFromField(_tableId, _keyTuple, 5, 32, getValueSchema());
  }

  /** Pop an element from childVoxelTypeIds (using the specified store) */
  function popChildVoxelTypeIds(IStore _store, bytes32 voxelTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.popFromField(_tableId, _keyTuple, 5, 32, getValueSchema());
  }

  /**
   * Update an element of childVoxelTypeIds at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateChildVoxelTypeIds(bytes32 voxelTypeId, uint256 _index, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    unchecked {
      StoreSwitch.updateInField(_tableId, _keyTuple, 5, _index * 32, abi.encodePacked((_element)), getValueSchema());
    }
  }

  /**
   * Update an element of childVoxelTypeIds (using the specified store) at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateChildVoxelTypeIds(IStore _store, bytes32 voxelTypeId, uint256 _index, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    unchecked {
      _store.updateInField(_tableId, _keyTuple, 5, _index * 32, abi.encodePacked((_element)), getValueSchema());
    }
  }

  /** Get schemaVoxelTypeIds */
  function getSchemaVoxelTypeIds(bytes32 voxelTypeId) internal view returns (bytes32[] memory schemaVoxelTypeIds) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 6, getValueSchema());
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes32());
  }

  /** Get schemaVoxelTypeIds (using the specified store) */
  function getSchemaVoxelTypeIds(
    IStore _store,
    bytes32 voxelTypeId
  ) internal view returns (bytes32[] memory schemaVoxelTypeIds) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 6, getValueSchema());
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes32());
  }

  /** Set schemaVoxelTypeIds */
  function setSchemaVoxelTypeIds(bytes32 voxelTypeId, bytes32[] memory schemaVoxelTypeIds) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.setField(_tableId, _keyTuple, 6, EncodeArray.encode((schemaVoxelTypeIds)), getValueSchema());
  }

  /** Set schemaVoxelTypeIds (using the specified store) */
  function setSchemaVoxelTypeIds(IStore _store, bytes32 voxelTypeId, bytes32[] memory schemaVoxelTypeIds) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.setField(_tableId, _keyTuple, 6, EncodeArray.encode((schemaVoxelTypeIds)), getValueSchema());
  }

  /** Get the length of schemaVoxelTypeIds */
  function lengthSchemaVoxelTypeIds(bytes32 voxelTypeId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 6, getValueSchema());
    unchecked {
      return _byteLength / 32;
    }
  }

  /** Get the length of schemaVoxelTypeIds (using the specified store) */
  function lengthSchemaVoxelTypeIds(IStore _store, bytes32 voxelTypeId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 6, getValueSchema());
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * Get an item of schemaVoxelTypeIds
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemSchemaVoxelTypeIds(bytes32 voxelTypeId, uint256 _index) internal view returns (bytes32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    unchecked {
      bytes memory _blob = StoreSwitch.getFieldSlice(
        _tableId,
        _keyTuple,
        6,
        getValueSchema(),
        _index * 32,
        (_index + 1) * 32
      );
      return (Bytes.slice32(_blob, 0));
    }
  }

  /**
   * Get an item of schemaVoxelTypeIds (using the specified store)
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemSchemaVoxelTypeIds(
    IStore _store,
    bytes32 voxelTypeId,
    uint256 _index
  ) internal view returns (bytes32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    unchecked {
      bytes memory _blob = _store.getFieldSlice(
        _tableId,
        _keyTuple,
        6,
        getValueSchema(),
        _index * 32,
        (_index + 1) * 32
      );
      return (Bytes.slice32(_blob, 0));
    }
  }

  /** Push an element to schemaVoxelTypeIds */
  function pushSchemaVoxelTypeIds(bytes32 voxelTypeId, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.pushToField(_tableId, _keyTuple, 6, abi.encodePacked((_element)), getValueSchema());
  }

  /** Push an element to schemaVoxelTypeIds (using the specified store) */
  function pushSchemaVoxelTypeIds(IStore _store, bytes32 voxelTypeId, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.pushToField(_tableId, _keyTuple, 6, abi.encodePacked((_element)), getValueSchema());
  }

  /** Pop an element from schemaVoxelTypeIds */
  function popSchemaVoxelTypeIds(bytes32 voxelTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.popFromField(_tableId, _keyTuple, 6, 32, getValueSchema());
  }

  /** Pop an element from schemaVoxelTypeIds (using the specified store) */
  function popSchemaVoxelTypeIds(IStore _store, bytes32 voxelTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.popFromField(_tableId, _keyTuple, 6, 32, getValueSchema());
  }

  /**
   * Update an element of schemaVoxelTypeIds at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateSchemaVoxelTypeIds(bytes32 voxelTypeId, uint256 _index, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    unchecked {
      StoreSwitch.updateInField(_tableId, _keyTuple, 6, _index * 32, abi.encodePacked((_element)), getValueSchema());
    }
  }

  /**
   * Update an element of schemaVoxelTypeIds (using the specified store) at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateSchemaVoxelTypeIds(IStore _store, bytes32 voxelTypeId, uint256 _index, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    unchecked {
      _store.updateInField(_tableId, _keyTuple, 6, _index * 32, abi.encodePacked((_element)), getValueSchema());
    }
  }

  /** Get componentDefs */
  function getComponentDefs(bytes32 voxelTypeId) internal view returns (bytes memory componentDefs) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 7, getValueSchema());
    return (bytes(_blob));
  }

  /** Get componentDefs (using the specified store) */
  function getComponentDefs(IStore _store, bytes32 voxelTypeId) internal view returns (bytes memory componentDefs) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 7, getValueSchema());
    return (bytes(_blob));
  }

  /** Set componentDefs */
  function setComponentDefs(bytes32 voxelTypeId, bytes memory componentDefs) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.setField(_tableId, _keyTuple, 7, bytes((componentDefs)), getValueSchema());
  }

  /** Set componentDefs (using the specified store) */
  function setComponentDefs(IStore _store, bytes32 voxelTypeId, bytes memory componentDefs) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.setField(_tableId, _keyTuple, 7, bytes((componentDefs)), getValueSchema());
  }

  /** Get the length of componentDefs */
  function lengthComponentDefs(bytes32 voxelTypeId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 7, getValueSchema());
    unchecked {
      return _byteLength / 1;
    }
  }

  /** Get the length of componentDefs (using the specified store) */
  function lengthComponentDefs(IStore _store, bytes32 voxelTypeId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 7, getValueSchema());
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * Get an item of componentDefs
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemComponentDefs(bytes32 voxelTypeId, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    unchecked {
      bytes memory _blob = StoreSwitch.getFieldSlice(
        _tableId,
        _keyTuple,
        7,
        getValueSchema(),
        _index * 1,
        (_index + 1) * 1
      );
      return (bytes(_blob));
    }
  }

  /**
   * Get an item of componentDefs (using the specified store)
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemComponentDefs(
    IStore _store,
    bytes32 voxelTypeId,
    uint256 _index
  ) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    unchecked {
      bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 7, getValueSchema(), _index * 1, (_index + 1) * 1);
      return (bytes(_blob));
    }
  }

  /** Push a slice to componentDefs */
  function pushComponentDefs(bytes32 voxelTypeId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.pushToField(_tableId, _keyTuple, 7, bytes((_slice)), getValueSchema());
  }

  /** Push a slice to componentDefs (using the specified store) */
  function pushComponentDefs(IStore _store, bytes32 voxelTypeId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.pushToField(_tableId, _keyTuple, 7, bytes((_slice)), getValueSchema());
  }

  /** Pop a slice from componentDefs */
  function popComponentDefs(bytes32 voxelTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.popFromField(_tableId, _keyTuple, 7, 1, getValueSchema());
  }

  /** Pop a slice from componentDefs (using the specified store) */
  function popComponentDefs(IStore _store, bytes32 voxelTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.popFromField(_tableId, _keyTuple, 7, 1, getValueSchema());
  }

  /**
   * Update a slice of componentDefs at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateComponentDefs(bytes32 voxelTypeId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    unchecked {
      StoreSwitch.updateInField(_tableId, _keyTuple, 7, _index * 1, bytes((_slice)), getValueSchema());
    }
  }

  /**
   * Update a slice of componentDefs (using the specified store) at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateComponentDefs(IStore _store, bytes32 voxelTypeId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    unchecked {
      _store.updateInField(_tableId, _keyTuple, 7, _index * 1, bytes((_slice)), getValueSchema());
    }
  }

  /** Get the full data */
  function get(bytes32 voxelTypeId) internal view returns (VoxelTypeRegistryData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getValueSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 voxelTypeId) internal view returns (VoxelTypeRegistryData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getValueSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 voxelTypeId,
    uint32 scale,
    bytes32 previewVoxelVariantId,
    bytes32 baseVoxelTypeId,
    bytes memory selectors,
    bytes memory metadata,
    bytes32[] memory childVoxelTypeIds,
    bytes32[] memory schemaVoxelTypeIds,
    bytes memory componentDefs
  ) internal {
    bytes memory _data = encode(
      scale,
      previewVoxelVariantId,
      baseVoxelTypeId,
      selectors,
      metadata,
      childVoxelTypeIds,
      schemaVoxelTypeIds,
      componentDefs
    );

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _data, getValueSchema());
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 voxelTypeId,
    uint32 scale,
    bytes32 previewVoxelVariantId,
    bytes32 baseVoxelTypeId,
    bytes memory selectors,
    bytes memory metadata,
    bytes32[] memory childVoxelTypeIds,
    bytes32[] memory schemaVoxelTypeIds,
    bytes memory componentDefs
  ) internal {
    bytes memory _data = encode(
      scale,
      previewVoxelVariantId,
      baseVoxelTypeId,
      selectors,
      metadata,
      childVoxelTypeIds,
      schemaVoxelTypeIds,
      componentDefs
    );

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.setRecord(_tableId, _keyTuple, _data, getValueSchema());
  }

  /** Set the full data using the data struct */
  function set(bytes32 voxelTypeId, VoxelTypeRegistryData memory _table) internal {
    set(
      voxelTypeId,
      _table.scale,
      _table.previewVoxelVariantId,
      _table.baseVoxelTypeId,
      _table.selectors,
      _table.metadata,
      _table.childVoxelTypeIds,
      _table.schemaVoxelTypeIds,
      _table.componentDefs
    );
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 voxelTypeId, VoxelTypeRegistryData memory _table) internal {
    set(
      _store,
      voxelTypeId,
      _table.scale,
      _table.previewVoxelVariantId,
      _table.baseVoxelTypeId,
      _table.selectors,
      _table.metadata,
      _table.childVoxelTypeIds,
      _table.schemaVoxelTypeIds,
      _table.componentDefs
    );
  }

  /**
   * Decode the tightly packed blob using this table's schema.
   * Undefined behaviour for invalid blobs.
   */
  function decode(bytes memory _blob) internal pure returns (VoxelTypeRegistryData memory _table) {
    // 68 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 68));

    _table.scale = (uint32(Bytes.slice4(_blob, 0)));

    _table.previewVoxelVariantId = (Bytes.slice32(_blob, 4));

    _table.baseVoxelTypeId = (Bytes.slice32(_blob, 36));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 68) {
      // skip static data length + dynamic lengths word
      uint256 _start = 100;
      uint256 _end;
      unchecked {
        _end = 100 + _encodedLengths.atIndex(0);
      }
      _table.selectors = (bytes(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

      _start = _end;
      unchecked {
        _end += _encodedLengths.atIndex(1);
      }
      _table.metadata = (bytes(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

      _start = _end;
      unchecked {
        _end += _encodedLengths.atIndex(2);
      }
      _table.childVoxelTypeIds = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_bytes32());

      _start = _end;
      unchecked {
        _end += _encodedLengths.atIndex(3);
      }
      _table.schemaVoxelTypeIds = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_bytes32());

      _start = _end;
      unchecked {
        _end += _encodedLengths.atIndex(4);
      }
      _table.componentDefs = (bytes(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    uint32 scale,
    bytes32 previewVoxelVariantId,
    bytes32 baseVoxelTypeId,
    bytes memory selectors,
    bytes memory metadata,
    bytes32[] memory childVoxelTypeIds,
    bytes32[] memory schemaVoxelTypeIds,
    bytes memory componentDefs
  ) internal pure returns (bytes memory) {
    PackedCounter _encodedLengths;
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = PackedCounterLib.pack(
        bytes(selectors).length,
        bytes(metadata).length,
        childVoxelTypeIds.length * 32,
        schemaVoxelTypeIds.length * 32,
        bytes(componentDefs).length
      );
    }

    return
      abi.encodePacked(
        scale,
        previewVoxelVariantId,
        baseVoxelTypeId,
        _encodedLengths.unwrap(),
        bytes((selectors)),
        bytes((metadata)),
        EncodeArray.encode((childVoxelTypeIds)),
        EncodeArray.encode((schemaVoxelTypeIds)),
        bytes((componentDefs))
      );
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 voxelTypeId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    return _keyTuple;
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 voxelTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple, getValueSchema());
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 voxelTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.deleteRecord(_tableId, _keyTuple, getValueSchema());
  }
}
