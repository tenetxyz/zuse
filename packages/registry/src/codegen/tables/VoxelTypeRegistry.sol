// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("VoxelTypeRegistr")));
bytes32 constant VoxelTypeRegistryTableId = _tableId;

struct VoxelTypeRegistryData {
  uint32 scale;
  bytes32 previewVoxelVariantId;
  address creator;
  uint256 numSpawns;
  bytes32 baseVoxelTypeId;
  string name;
  bytes32[] childVoxelTypeIds;
  bytes32[] schemaVoxelTypeIds;
}

library VoxelTypeRegistry {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](8);
    _schema[0] = SchemaType.UINT32;
    _schema[1] = SchemaType.BYTES32;
    _schema[2] = SchemaType.ADDRESS;
    _schema[3] = SchemaType.UINT256;
    _schema[4] = SchemaType.BYTES32;
    _schema[5] = SchemaType.STRING;
    _schema[6] = SchemaType.BYTES32_ARRAY;
    _schema[7] = SchemaType.BYTES32_ARRAY;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](8);
    _fieldNames[0] = "scale";
    _fieldNames[1] = "previewVoxelVariantId";
    _fieldNames[2] = "creator";
    _fieldNames[3] = "numSpawns";
    _fieldNames[4] = "baseVoxelTypeId";
    _fieldNames[5] = "name";
    _fieldNames[6] = "childVoxelTypeIds";
    _fieldNames[7] = "schemaVoxelTypeIds";
    return ("VoxelTypeRegistry", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get scale */
  function getScale(bytes32 voxelTypeId) internal view returns (uint32 scale) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get scale (using the specified store) */
  function getScale(IStore _store, bytes32 voxelTypeId) internal view returns (uint32 scale) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set scale */
  function setScale(bytes32 voxelTypeId, uint32 scale) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((scale)));
  }

  /** Set scale (using the specified store) */
  function setScale(IStore _store, bytes32 voxelTypeId, uint32 scale) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((scale)));
  }

  /** Get previewVoxelVariantId */
  function getPreviewVoxelVariantId(bytes32 voxelTypeId) internal view returns (bytes32 previewVoxelVariantId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (Bytes.slice32(_blob, 0));
  }

  /** Get previewVoxelVariantId (using the specified store) */
  function getPreviewVoxelVariantId(
    IStore _store,
    bytes32 voxelTypeId
  ) internal view returns (bytes32 previewVoxelVariantId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (Bytes.slice32(_blob, 0));
  }

  /** Set previewVoxelVariantId */
  function setPreviewVoxelVariantId(bytes32 voxelTypeId, bytes32 previewVoxelVariantId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((previewVoxelVariantId)));
  }

  /** Set previewVoxelVariantId (using the specified store) */
  function setPreviewVoxelVariantId(IStore _store, bytes32 voxelTypeId, bytes32 previewVoxelVariantId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((previewVoxelVariantId)));
  }

  /** Get creator */
  function getCreator(bytes32 voxelTypeId) internal view returns (address creator) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Get creator (using the specified store) */
  function getCreator(IStore _store, bytes32 voxelTypeId) internal view returns (address creator) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Set creator */
  function setCreator(bytes32 voxelTypeId, address creator) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((creator)));
  }

  /** Set creator (using the specified store) */
  function setCreator(IStore _store, bytes32 voxelTypeId, address creator) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((creator)));
  }

  /** Get numSpawns */
  function getNumSpawns(bytes32 voxelTypeId) internal view returns (uint256 numSpawns) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get numSpawns (using the specified store) */
  function getNumSpawns(IStore _store, bytes32 voxelTypeId) internal view returns (uint256 numSpawns) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set numSpawns */
  function setNumSpawns(bytes32 voxelTypeId, uint256 numSpawns) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((numSpawns)));
  }

  /** Set numSpawns (using the specified store) */
  function setNumSpawns(IStore _store, bytes32 voxelTypeId, uint256 numSpawns) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((numSpawns)));
  }

  /** Get baseVoxelTypeId */
  function getBaseVoxelTypeId(bytes32 voxelTypeId) internal view returns (bytes32 baseVoxelTypeId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4);
    return (Bytes.slice32(_blob, 0));
  }

  /** Get baseVoxelTypeId (using the specified store) */
  function getBaseVoxelTypeId(IStore _store, bytes32 voxelTypeId) internal view returns (bytes32 baseVoxelTypeId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4);
    return (Bytes.slice32(_blob, 0));
  }

  /** Set baseVoxelTypeId */
  function setBaseVoxelTypeId(bytes32 voxelTypeId, bytes32 baseVoxelTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.setField(_tableId, _keyTuple, 4, abi.encodePacked((baseVoxelTypeId)));
  }

  /** Set baseVoxelTypeId (using the specified store) */
  function setBaseVoxelTypeId(IStore _store, bytes32 voxelTypeId, bytes32 baseVoxelTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.setField(_tableId, _keyTuple, 4, abi.encodePacked((baseVoxelTypeId)));
  }

  /** Get name */
  function getName(bytes32 voxelTypeId) internal view returns (string memory name) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 5);
    return (string(_blob));
  }

  /** Get name (using the specified store) */
  function getName(IStore _store, bytes32 voxelTypeId) internal view returns (string memory name) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 5);
    return (string(_blob));
  }

  /** Set name */
  function setName(bytes32 voxelTypeId, string memory name) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.setField(_tableId, _keyTuple, 5, bytes((name)));
  }

  /** Set name (using the specified store) */
  function setName(IStore _store, bytes32 voxelTypeId, string memory name) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.setField(_tableId, _keyTuple, 5, bytes((name)));
  }

  /** Get the length of name */
  function lengthName(bytes32 voxelTypeId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 5, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of name (using the specified store) */
  function lengthName(IStore _store, bytes32 voxelTypeId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 5, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of name (unchecked, returns invalid data if index overflows) */
  function getItemName(bytes32 voxelTypeId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 5, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Get an item of name (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemName(IStore _store, bytes32 voxelTypeId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 5, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Push a slice to name */
  function pushName(bytes32 voxelTypeId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.pushToField(_tableId, _keyTuple, 5, bytes((_slice)));
  }

  /** Push a slice to name (using the specified store) */
  function pushName(IStore _store, bytes32 voxelTypeId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.pushToField(_tableId, _keyTuple, 5, bytes((_slice)));
  }

  /** Pop a slice from name */
  function popName(bytes32 voxelTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.popFromField(_tableId, _keyTuple, 5, 1);
  }

  /** Pop a slice from name (using the specified store) */
  function popName(IStore _store, bytes32 voxelTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.popFromField(_tableId, _keyTuple, 5, 1);
  }

  /** Update a slice of name at `_index` */
  function updateName(bytes32 voxelTypeId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.updateInField(_tableId, _keyTuple, 5, _index * 1, bytes((_slice)));
  }

  /** Update a slice of name (using the specified store) at `_index` */
  function updateName(IStore _store, bytes32 voxelTypeId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.updateInField(_tableId, _keyTuple, 5, _index * 1, bytes((_slice)));
  }

  /** Get childVoxelTypeIds */
  function getChildVoxelTypeIds(bytes32 voxelTypeId) internal view returns (bytes32[] memory childVoxelTypeIds) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 6);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes32());
  }

  /** Get childVoxelTypeIds (using the specified store) */
  function getChildVoxelTypeIds(
    IStore _store,
    bytes32 voxelTypeId
  ) internal view returns (bytes32[] memory childVoxelTypeIds) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 6);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes32());
  }

  /** Set childVoxelTypeIds */
  function setChildVoxelTypeIds(bytes32 voxelTypeId, bytes32[] memory childVoxelTypeIds) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.setField(_tableId, _keyTuple, 6, EncodeArray.encode((childVoxelTypeIds)));
  }

  /** Set childVoxelTypeIds (using the specified store) */
  function setChildVoxelTypeIds(IStore _store, bytes32 voxelTypeId, bytes32[] memory childVoxelTypeIds) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.setField(_tableId, _keyTuple, 6, EncodeArray.encode((childVoxelTypeIds)));
  }

  /** Get the length of childVoxelTypeIds */
  function lengthChildVoxelTypeIds(bytes32 voxelTypeId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 6, getSchema());
    return _byteLength / 32;
  }

  /** Get the length of childVoxelTypeIds (using the specified store) */
  function lengthChildVoxelTypeIds(IStore _store, bytes32 voxelTypeId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 6, getSchema());
    return _byteLength / 32;
  }

  /** Get an item of childVoxelTypeIds (unchecked, returns invalid data if index overflows) */
  function getItemChildVoxelTypeIds(bytes32 voxelTypeId, uint256 _index) internal view returns (bytes32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 6, getSchema(), _index * 32, (_index + 1) * 32);
    return (Bytes.slice32(_blob, 0));
  }

  /** Get an item of childVoxelTypeIds (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemChildVoxelTypeIds(
    IStore _store,
    bytes32 voxelTypeId,
    uint256 _index
  ) internal view returns (bytes32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 6, getSchema(), _index * 32, (_index + 1) * 32);
    return (Bytes.slice32(_blob, 0));
  }

  /** Push an element to childVoxelTypeIds */
  function pushChildVoxelTypeIds(bytes32 voxelTypeId, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.pushToField(_tableId, _keyTuple, 6, abi.encodePacked((_element)));
  }

  /** Push an element to childVoxelTypeIds (using the specified store) */
  function pushChildVoxelTypeIds(IStore _store, bytes32 voxelTypeId, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.pushToField(_tableId, _keyTuple, 6, abi.encodePacked((_element)));
  }

  /** Pop an element from childVoxelTypeIds */
  function popChildVoxelTypeIds(bytes32 voxelTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.popFromField(_tableId, _keyTuple, 6, 32);
  }

  /** Pop an element from childVoxelTypeIds (using the specified store) */
  function popChildVoxelTypeIds(IStore _store, bytes32 voxelTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.popFromField(_tableId, _keyTuple, 6, 32);
  }

  /** Update an element of childVoxelTypeIds at `_index` */
  function updateChildVoxelTypeIds(bytes32 voxelTypeId, uint256 _index, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.updateInField(_tableId, _keyTuple, 6, _index * 32, abi.encodePacked((_element)));
  }

  /** Update an element of childVoxelTypeIds (using the specified store) at `_index` */
  function updateChildVoxelTypeIds(IStore _store, bytes32 voxelTypeId, uint256 _index, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.updateInField(_tableId, _keyTuple, 6, _index * 32, abi.encodePacked((_element)));
  }

  /** Get schemaVoxelTypeIds */
  function getSchemaVoxelTypeIds(bytes32 voxelTypeId) internal view returns (bytes32[] memory schemaVoxelTypeIds) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 7);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes32());
  }

  /** Get schemaVoxelTypeIds (using the specified store) */
  function getSchemaVoxelTypeIds(
    IStore _store,
    bytes32 voxelTypeId
  ) internal view returns (bytes32[] memory schemaVoxelTypeIds) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 7);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes32());
  }

  /** Set schemaVoxelTypeIds */
  function setSchemaVoxelTypeIds(bytes32 voxelTypeId, bytes32[] memory schemaVoxelTypeIds) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.setField(_tableId, _keyTuple, 7, EncodeArray.encode((schemaVoxelTypeIds)));
  }

  /** Set schemaVoxelTypeIds (using the specified store) */
  function setSchemaVoxelTypeIds(IStore _store, bytes32 voxelTypeId, bytes32[] memory schemaVoxelTypeIds) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.setField(_tableId, _keyTuple, 7, EncodeArray.encode((schemaVoxelTypeIds)));
  }

  /** Get the length of schemaVoxelTypeIds */
  function lengthSchemaVoxelTypeIds(bytes32 voxelTypeId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 7, getSchema());
    return _byteLength / 32;
  }

  /** Get the length of schemaVoxelTypeIds (using the specified store) */
  function lengthSchemaVoxelTypeIds(IStore _store, bytes32 voxelTypeId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 7, getSchema());
    return _byteLength / 32;
  }

  /** Get an item of schemaVoxelTypeIds (unchecked, returns invalid data if index overflows) */
  function getItemSchemaVoxelTypeIds(bytes32 voxelTypeId, uint256 _index) internal view returns (bytes32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 7, getSchema(), _index * 32, (_index + 1) * 32);
    return (Bytes.slice32(_blob, 0));
  }

  /** Get an item of schemaVoxelTypeIds (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemSchemaVoxelTypeIds(
    IStore _store,
    bytes32 voxelTypeId,
    uint256 _index
  ) internal view returns (bytes32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 7, getSchema(), _index * 32, (_index + 1) * 32);
    return (Bytes.slice32(_blob, 0));
  }

  /** Push an element to schemaVoxelTypeIds */
  function pushSchemaVoxelTypeIds(bytes32 voxelTypeId, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.pushToField(_tableId, _keyTuple, 7, abi.encodePacked((_element)));
  }

  /** Push an element to schemaVoxelTypeIds (using the specified store) */
  function pushSchemaVoxelTypeIds(IStore _store, bytes32 voxelTypeId, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.pushToField(_tableId, _keyTuple, 7, abi.encodePacked((_element)));
  }

  /** Pop an element from schemaVoxelTypeIds */
  function popSchemaVoxelTypeIds(bytes32 voxelTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.popFromField(_tableId, _keyTuple, 7, 32);
  }

  /** Pop an element from schemaVoxelTypeIds (using the specified store) */
  function popSchemaVoxelTypeIds(IStore _store, bytes32 voxelTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.popFromField(_tableId, _keyTuple, 7, 32);
  }

  /** Update an element of schemaVoxelTypeIds at `_index` */
  function updateSchemaVoxelTypeIds(bytes32 voxelTypeId, uint256 _index, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.updateInField(_tableId, _keyTuple, 7, _index * 32, abi.encodePacked((_element)));
  }

  /** Update an element of schemaVoxelTypeIds (using the specified store) at `_index` */
  function updateSchemaVoxelTypeIds(IStore _store, bytes32 voxelTypeId, uint256 _index, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.updateInField(_tableId, _keyTuple, 7, _index * 32, abi.encodePacked((_element)));
  }

  /** Get the full data */
  function get(bytes32 voxelTypeId) internal view returns (VoxelTypeRegistryData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 voxelTypeId) internal view returns (VoxelTypeRegistryData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 voxelTypeId,
    uint32 scale,
    bytes32 previewVoxelVariantId,
    address creator,
    uint256 numSpawns,
    bytes32 baseVoxelTypeId,
    string memory name,
    bytes32[] memory childVoxelTypeIds,
    bytes32[] memory schemaVoxelTypeIds
  ) internal {
    bytes memory _data = encode(
      scale,
      previewVoxelVariantId,
      creator,
      numSpawns,
      baseVoxelTypeId,
      name,
      childVoxelTypeIds,
      schemaVoxelTypeIds
    );

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 voxelTypeId,
    uint32 scale,
    bytes32 previewVoxelVariantId,
    address creator,
    uint256 numSpawns,
    bytes32 baseVoxelTypeId,
    string memory name,
    bytes32[] memory childVoxelTypeIds,
    bytes32[] memory schemaVoxelTypeIds
  ) internal {
    bytes memory _data = encode(
      scale,
      previewVoxelVariantId,
      creator,
      numSpawns,
      baseVoxelTypeId,
      name,
      childVoxelTypeIds,
      schemaVoxelTypeIds
    );

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 voxelTypeId, VoxelTypeRegistryData memory _table) internal {
    set(
      voxelTypeId,
      _table.scale,
      _table.previewVoxelVariantId,
      _table.creator,
      _table.numSpawns,
      _table.baseVoxelTypeId,
      _table.name,
      _table.childVoxelTypeIds,
      _table.schemaVoxelTypeIds
    );
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 voxelTypeId, VoxelTypeRegistryData memory _table) internal {
    set(
      _store,
      voxelTypeId,
      _table.scale,
      _table.previewVoxelVariantId,
      _table.creator,
      _table.numSpawns,
      _table.baseVoxelTypeId,
      _table.name,
      _table.childVoxelTypeIds,
      _table.schemaVoxelTypeIds
    );
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (VoxelTypeRegistryData memory _table) {
    // 120 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 120));

    _table.scale = (uint32(Bytes.slice4(_blob, 0)));

    _table.previewVoxelVariantId = (Bytes.slice32(_blob, 4));

    _table.creator = (address(Bytes.slice20(_blob, 36)));

    _table.numSpawns = (uint256(Bytes.slice32(_blob, 56)));

    _table.baseVoxelTypeId = (Bytes.slice32(_blob, 88));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 120) {
      uint256 _start;
      // skip static data length + dynamic lengths word
      uint256 _end = 152;

      _start = _end;
      _end += _encodedLengths.atIndex(0);
      _table.name = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

      _start = _end;
      _end += _encodedLengths.atIndex(1);
      _table.childVoxelTypeIds = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_bytes32());

      _start = _end;
      _end += _encodedLengths.atIndex(2);
      _table.schemaVoxelTypeIds = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_bytes32());
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    uint32 scale,
    bytes32 previewVoxelVariantId,
    address creator,
    uint256 numSpawns,
    bytes32 baseVoxelTypeId,
    string memory name,
    bytes32[] memory childVoxelTypeIds,
    bytes32[] memory schemaVoxelTypeIds
  ) internal pure returns (bytes memory) {
    uint40[] memory _counters = new uint40[](3);
    _counters[0] = uint40(bytes(name).length);
    _counters[1] = uint40(childVoxelTypeIds.length * 32);
    _counters[2] = uint40(schemaVoxelTypeIds.length * 32);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    return
      abi.encodePacked(
        scale,
        previewVoxelVariantId,
        creator,
        numSpawns,
        baseVoxelTypeId,
        _encodedLengths.unwrap(),
        bytes((name)),
        EncodeArray.encode((childVoxelTypeIds)),
        EncodeArray.encode((schemaVoxelTypeIds))
      );
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 voxelTypeId) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 voxelTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 voxelTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
