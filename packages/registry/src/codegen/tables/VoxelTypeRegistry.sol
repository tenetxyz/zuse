// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("VoxelTypeRegistr")));
bytes32 constant VoxelTypeRegistryTableId = _tableId;

struct VoxelTypeRegistryData {
  address caAddress;
  bytes32 previewVoxelVariantId;
  address creator;
  uint256 numSpawns;
  string name;
}

library VoxelTypeRegistry {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](5);
    _schema[0] = SchemaType.ADDRESS;
    _schema[1] = SchemaType.BYTES32;
    _schema[2] = SchemaType.ADDRESS;
    _schema[3] = SchemaType.UINT256;
    _schema[4] = SchemaType.STRING;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](5);
    _fieldNames[0] = "caAddress";
    _fieldNames[1] = "previewVoxelVariantId";
    _fieldNames[2] = "creator";
    _fieldNames[3] = "numSpawns";
    _fieldNames[4] = "name";
    return ("VoxelTypeRegistry", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get caAddress */
  function getCaAddress(bytes32 voxelTypeId) internal view returns (address caAddress) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Get caAddress (using the specified store) */
  function getCaAddress(IStore _store, bytes32 voxelTypeId) internal view returns (address caAddress) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Set caAddress */
  function setCaAddress(bytes32 voxelTypeId, address caAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((caAddress)));
  }

  /** Set caAddress (using the specified store) */
  function setCaAddress(IStore _store, bytes32 voxelTypeId, address caAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((caAddress)));
  }

  /** Get previewVoxelVariantId */
  function getPreviewVoxelVariantId(bytes32 voxelTypeId) internal view returns (bytes32 previewVoxelVariantId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (Bytes.slice32(_blob, 0));
  }

  /** Get previewVoxelVariantId (using the specified store) */
  function getPreviewVoxelVariantId(
    IStore _store,
    bytes32 voxelTypeId
  ) internal view returns (bytes32 previewVoxelVariantId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (Bytes.slice32(_blob, 0));
  }

  /** Set previewVoxelVariantId */
  function setPreviewVoxelVariantId(bytes32 voxelTypeId, bytes32 previewVoxelVariantId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((previewVoxelVariantId)));
  }

  /** Set previewVoxelVariantId (using the specified store) */
  function setPreviewVoxelVariantId(IStore _store, bytes32 voxelTypeId, bytes32 previewVoxelVariantId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((previewVoxelVariantId)));
  }

  /** Get creator */
  function getCreator(bytes32 voxelTypeId) internal view returns (address creator) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Get creator (using the specified store) */
  function getCreator(IStore _store, bytes32 voxelTypeId) internal view returns (address creator) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Set creator */
  function setCreator(bytes32 voxelTypeId, address creator) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((creator)));
  }

  /** Set creator (using the specified store) */
  function setCreator(IStore _store, bytes32 voxelTypeId, address creator) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((creator)));
  }

  /** Get numSpawns */
  function getNumSpawns(bytes32 voxelTypeId) internal view returns (uint256 numSpawns) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get numSpawns (using the specified store) */
  function getNumSpawns(IStore _store, bytes32 voxelTypeId) internal view returns (uint256 numSpawns) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set numSpawns */
  function setNumSpawns(bytes32 voxelTypeId, uint256 numSpawns) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((numSpawns)));
  }

  /** Set numSpawns (using the specified store) */
  function setNumSpawns(IStore _store, bytes32 voxelTypeId, uint256 numSpawns) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((numSpawns)));
  }

  /** Get name */
  function getName(bytes32 voxelTypeId) internal view returns (string memory name) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4);
    return (string(_blob));
  }

  /** Get name (using the specified store) */
  function getName(IStore _store, bytes32 voxelTypeId) internal view returns (string memory name) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4);
    return (string(_blob));
  }

  /** Set name */
  function setName(bytes32 voxelTypeId, string memory name) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.setField(_tableId, _keyTuple, 4, bytes((name)));
  }

  /** Set name (using the specified store) */
  function setName(IStore _store, bytes32 voxelTypeId, string memory name) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.setField(_tableId, _keyTuple, 4, bytes((name)));
  }

  /** Get the length of name */
  function lengthName(bytes32 voxelTypeId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 4, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of name (using the specified store) */
  function lengthName(IStore _store, bytes32 voxelTypeId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 4, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of name (unchecked, returns invalid data if index overflows) */
  function getItemName(bytes32 voxelTypeId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 4, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Get an item of name (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemName(IStore _store, bytes32 voxelTypeId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 4, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Push a slice to name */
  function pushName(bytes32 voxelTypeId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.pushToField(_tableId, _keyTuple, 4, bytes((_slice)));
  }

  /** Push a slice to name (using the specified store) */
  function pushName(IStore _store, bytes32 voxelTypeId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.pushToField(_tableId, _keyTuple, 4, bytes((_slice)));
  }

  /** Pop a slice from name */
  function popName(bytes32 voxelTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.popFromField(_tableId, _keyTuple, 4, 1);
  }

  /** Pop a slice from name (using the specified store) */
  function popName(IStore _store, bytes32 voxelTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.popFromField(_tableId, _keyTuple, 4, 1);
  }

  /** Update a slice of name at `_index` */
  function updateName(bytes32 voxelTypeId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.updateInField(_tableId, _keyTuple, 4, _index * 1, bytes((_slice)));
  }

  /** Update a slice of name (using the specified store) at `_index` */
  function updateName(IStore _store, bytes32 voxelTypeId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.updateInField(_tableId, _keyTuple, 4, _index * 1, bytes((_slice)));
  }

  /** Get the full data */
  function get(bytes32 voxelTypeId) internal view returns (VoxelTypeRegistryData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 voxelTypeId) internal view returns (VoxelTypeRegistryData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 voxelTypeId,
    address caAddress,
    bytes32 previewVoxelVariantId,
    address creator,
    uint256 numSpawns,
    string memory name
  ) internal {
    bytes memory _data = encode(caAddress, previewVoxelVariantId, creator, numSpawns, name);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 voxelTypeId,
    address caAddress,
    bytes32 previewVoxelVariantId,
    address creator,
    uint256 numSpawns,
    string memory name
  ) internal {
    bytes memory _data = encode(caAddress, previewVoxelVariantId, creator, numSpawns, name);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 voxelTypeId, VoxelTypeRegistryData memory _table) internal {
    set(voxelTypeId, _table.caAddress, _table.previewVoxelVariantId, _table.creator, _table.numSpawns, _table.name);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 voxelTypeId, VoxelTypeRegistryData memory _table) internal {
    set(
      _store,
      voxelTypeId,
      _table.caAddress,
      _table.previewVoxelVariantId,
      _table.creator,
      _table.numSpawns,
      _table.name
    );
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (VoxelTypeRegistryData memory _table) {
    // 104 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 104));

    _table.caAddress = (address(Bytes.slice20(_blob, 0)));

    _table.previewVoxelVariantId = (Bytes.slice32(_blob, 20));

    _table.creator = (address(Bytes.slice20(_blob, 52)));

    _table.numSpawns = (uint256(Bytes.slice32(_blob, 72)));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 104) {
      uint256 _start;
      // skip static data length + dynamic lengths word
      uint256 _end = 136;

      _start = _end;
      _end += _encodedLengths.atIndex(0);
      _table.name = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    address caAddress,
    bytes32 previewVoxelVariantId,
    address creator,
    uint256 numSpawns,
    string memory name
  ) internal pure returns (bytes memory) {
    uint40[] memory _counters = new uint40[](1);
    _counters[0] = uint40(bytes(name).length);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    return
      abi.encodePacked(caAddress, previewVoxelVariantId, creator, numSpawns, _encodedLengths.unwrap(), bytes((name)));
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 voxelTypeId) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 voxelTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 voxelTypeId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = voxelTypeId;

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
