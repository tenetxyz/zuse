// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("WorldRegistry")));
bytes32 constant WorldRegistryTableId = _tableId;

struct WorldRegistryData {
  address creator;
  string name;
  string description;
  address[] caAddresses;
}

library WorldRegistry {
  /** Get the table's key schema */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.ADDRESS;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's value schema */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](4);
    _schema[0] = SchemaType.ADDRESS;
    _schema[1] = SchemaType.STRING;
    _schema[2] = SchemaType.STRING;
    _schema[3] = SchemaType.ADDRESS_ARRAY;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's key names */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "worldAddress";
  }

  /** Get the table's field names */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](4);
    fieldNames[0] = "creator";
    fieldNames[1] = "name";
    fieldNames[2] = "description";
    fieldNames[3] = "caAddresses";
  }

  /** Register the table's key schema, value schema, key names and value names */
  function register() internal {
    StoreSwitch.registerTable(_tableId, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Register the table's key schema, value schema, key names and value names (using the specified store) */
  function register(IStore _store) internal {
    _store.registerTable(_tableId, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Get creator */
  function getCreator(address worldAddress) internal view returns (address creator) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0, getValueSchema());
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Get creator (using the specified store) */
  function getCreator(IStore _store, address worldAddress) internal view returns (address creator) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0, getValueSchema());
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Set creator */
  function setCreator(address worldAddress, address creator) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((creator)), getValueSchema());
  }

  /** Set creator (using the specified store) */
  function setCreator(IStore _store, address worldAddress, address creator) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((creator)), getValueSchema());
  }

  /** Get name */
  function getName(address worldAddress) internal view returns (string memory name) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1, getValueSchema());
    return (string(_blob));
  }

  /** Get name (using the specified store) */
  function getName(IStore _store, address worldAddress) internal view returns (string memory name) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1, getValueSchema());
    return (string(_blob));
  }

  /** Set name */
  function setName(address worldAddress, string memory name) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    StoreSwitch.setField(_tableId, _keyTuple, 1, bytes((name)), getValueSchema());
  }

  /** Set name (using the specified store) */
  function setName(IStore _store, address worldAddress, string memory name) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    _store.setField(_tableId, _keyTuple, 1, bytes((name)), getValueSchema());
  }

  /** Get the length of name */
  function lengthName(address worldAddress) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 1, getValueSchema());
    unchecked {
      return _byteLength / 1;
    }
  }

  /** Get the length of name (using the specified store) */
  function lengthName(IStore _store, address worldAddress) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 1, getValueSchema());
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * Get an item of name
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemName(address worldAddress, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    unchecked {
      bytes memory _blob = StoreSwitch.getFieldSlice(
        _tableId,
        _keyTuple,
        1,
        getValueSchema(),
        _index * 1,
        (_index + 1) * 1
      );
      return (string(_blob));
    }
  }

  /**
   * Get an item of name (using the specified store)
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemName(IStore _store, address worldAddress, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    unchecked {
      bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 1, getValueSchema(), _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /** Push a slice to name */
  function pushName(address worldAddress, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    StoreSwitch.pushToField(_tableId, _keyTuple, 1, bytes((_slice)), getValueSchema());
  }

  /** Push a slice to name (using the specified store) */
  function pushName(IStore _store, address worldAddress, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    _store.pushToField(_tableId, _keyTuple, 1, bytes((_slice)), getValueSchema());
  }

  /** Pop a slice from name */
  function popName(address worldAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    StoreSwitch.popFromField(_tableId, _keyTuple, 1, 1, getValueSchema());
  }

  /** Pop a slice from name (using the specified store) */
  function popName(IStore _store, address worldAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    _store.popFromField(_tableId, _keyTuple, 1, 1, getValueSchema());
  }

  /**
   * Update a slice of name at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateName(address worldAddress, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    unchecked {
      StoreSwitch.updateInField(_tableId, _keyTuple, 1, _index * 1, bytes((_slice)), getValueSchema());
    }
  }

  /**
   * Update a slice of name (using the specified store) at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateName(IStore _store, address worldAddress, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    unchecked {
      _store.updateInField(_tableId, _keyTuple, 1, _index * 1, bytes((_slice)), getValueSchema());
    }
  }

  /** Get description */
  function getDescription(address worldAddress) internal view returns (string memory description) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2, getValueSchema());
    return (string(_blob));
  }

  /** Get description (using the specified store) */
  function getDescription(IStore _store, address worldAddress) internal view returns (string memory description) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2, getValueSchema());
    return (string(_blob));
  }

  /** Set description */
  function setDescription(address worldAddress, string memory description) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    StoreSwitch.setField(_tableId, _keyTuple, 2, bytes((description)), getValueSchema());
  }

  /** Set description (using the specified store) */
  function setDescription(IStore _store, address worldAddress, string memory description) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    _store.setField(_tableId, _keyTuple, 2, bytes((description)), getValueSchema());
  }

  /** Get the length of description */
  function lengthDescription(address worldAddress) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 2, getValueSchema());
    unchecked {
      return _byteLength / 1;
    }
  }

  /** Get the length of description (using the specified store) */
  function lengthDescription(IStore _store, address worldAddress) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 2, getValueSchema());
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * Get an item of description
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemDescription(address worldAddress, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    unchecked {
      bytes memory _blob = StoreSwitch.getFieldSlice(
        _tableId,
        _keyTuple,
        2,
        getValueSchema(),
        _index * 1,
        (_index + 1) * 1
      );
      return (string(_blob));
    }
  }

  /**
   * Get an item of description (using the specified store)
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemDescription(
    IStore _store,
    address worldAddress,
    uint256 _index
  ) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    unchecked {
      bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 2, getValueSchema(), _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /** Push a slice to description */
  function pushDescription(address worldAddress, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    StoreSwitch.pushToField(_tableId, _keyTuple, 2, bytes((_slice)), getValueSchema());
  }

  /** Push a slice to description (using the specified store) */
  function pushDescription(IStore _store, address worldAddress, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    _store.pushToField(_tableId, _keyTuple, 2, bytes((_slice)), getValueSchema());
  }

  /** Pop a slice from description */
  function popDescription(address worldAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    StoreSwitch.popFromField(_tableId, _keyTuple, 2, 1, getValueSchema());
  }

  /** Pop a slice from description (using the specified store) */
  function popDescription(IStore _store, address worldAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    _store.popFromField(_tableId, _keyTuple, 2, 1, getValueSchema());
  }

  /**
   * Update a slice of description at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateDescription(address worldAddress, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    unchecked {
      StoreSwitch.updateInField(_tableId, _keyTuple, 2, _index * 1, bytes((_slice)), getValueSchema());
    }
  }

  /**
   * Update a slice of description (using the specified store) at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateDescription(IStore _store, address worldAddress, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    unchecked {
      _store.updateInField(_tableId, _keyTuple, 2, _index * 1, bytes((_slice)), getValueSchema());
    }
  }

  /** Get caAddresses */
  function getCaAddresses(address worldAddress) internal view returns (address[] memory caAddresses) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3, getValueSchema());
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_address());
  }

  /** Get caAddresses (using the specified store) */
  function getCaAddresses(IStore _store, address worldAddress) internal view returns (address[] memory caAddresses) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3, getValueSchema());
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_address());
  }

  /** Set caAddresses */
  function setCaAddresses(address worldAddress, address[] memory caAddresses) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    StoreSwitch.setField(_tableId, _keyTuple, 3, EncodeArray.encode((caAddresses)), getValueSchema());
  }

  /** Set caAddresses (using the specified store) */
  function setCaAddresses(IStore _store, address worldAddress, address[] memory caAddresses) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    _store.setField(_tableId, _keyTuple, 3, EncodeArray.encode((caAddresses)), getValueSchema());
  }

  /** Get the length of caAddresses */
  function lengthCaAddresses(address worldAddress) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 3, getValueSchema());
    unchecked {
      return _byteLength / 20;
    }
  }

  /** Get the length of caAddresses (using the specified store) */
  function lengthCaAddresses(IStore _store, address worldAddress) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 3, getValueSchema());
    unchecked {
      return _byteLength / 20;
    }
  }

  /**
   * Get an item of caAddresses
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemCaAddresses(address worldAddress, uint256 _index) internal view returns (address) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    unchecked {
      bytes memory _blob = StoreSwitch.getFieldSlice(
        _tableId,
        _keyTuple,
        3,
        getValueSchema(),
        _index * 20,
        (_index + 1) * 20
      );
      return (address(Bytes.slice20(_blob, 0)));
    }
  }

  /**
   * Get an item of caAddresses (using the specified store)
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemCaAddresses(IStore _store, address worldAddress, uint256 _index) internal view returns (address) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    unchecked {
      bytes memory _blob = _store.getFieldSlice(
        _tableId,
        _keyTuple,
        3,
        getValueSchema(),
        _index * 20,
        (_index + 1) * 20
      );
      return (address(Bytes.slice20(_blob, 0)));
    }
  }

  /** Push an element to caAddresses */
  function pushCaAddresses(address worldAddress, address _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    StoreSwitch.pushToField(_tableId, _keyTuple, 3, abi.encodePacked((_element)), getValueSchema());
  }

  /** Push an element to caAddresses (using the specified store) */
  function pushCaAddresses(IStore _store, address worldAddress, address _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    _store.pushToField(_tableId, _keyTuple, 3, abi.encodePacked((_element)), getValueSchema());
  }

  /** Pop an element from caAddresses */
  function popCaAddresses(address worldAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    StoreSwitch.popFromField(_tableId, _keyTuple, 3, 20, getValueSchema());
  }

  /** Pop an element from caAddresses (using the specified store) */
  function popCaAddresses(IStore _store, address worldAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    _store.popFromField(_tableId, _keyTuple, 3, 20, getValueSchema());
  }

  /**
   * Update an element of caAddresses at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateCaAddresses(address worldAddress, uint256 _index, address _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    unchecked {
      StoreSwitch.updateInField(_tableId, _keyTuple, 3, _index * 20, abi.encodePacked((_element)), getValueSchema());
    }
  }

  /**
   * Update an element of caAddresses (using the specified store) at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateCaAddresses(IStore _store, address worldAddress, uint256 _index, address _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    unchecked {
      _store.updateInField(_tableId, _keyTuple, 3, _index * 20, abi.encodePacked((_element)), getValueSchema());
    }
  }

  /** Get the full data */
  function get(address worldAddress) internal view returns (WorldRegistryData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getValueSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, address worldAddress) internal view returns (WorldRegistryData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getValueSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    address worldAddress,
    address creator,
    string memory name,
    string memory description,
    address[] memory caAddresses
  ) internal {
    bytes memory _data = encode(creator, name, description, caAddresses);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data, getValueSchema());
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    address worldAddress,
    address creator,
    string memory name,
    string memory description,
    address[] memory caAddresses
  ) internal {
    bytes memory _data = encode(creator, name, description, caAddresses);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    _store.setRecord(_tableId, _keyTuple, _data, getValueSchema());
  }

  /** Set the full data using the data struct */
  function set(address worldAddress, WorldRegistryData memory _table) internal {
    set(worldAddress, _table.creator, _table.name, _table.description, _table.caAddresses);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, address worldAddress, WorldRegistryData memory _table) internal {
    set(_store, worldAddress, _table.creator, _table.name, _table.description, _table.caAddresses);
  }

  /**
   * Decode the tightly packed blob using this table's schema.
   * Undefined behaviour for invalid blobs.
   */
  function decode(bytes memory _blob) internal pure returns (WorldRegistryData memory _table) {
    // 20 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 20));

    _table.creator = (address(Bytes.slice20(_blob, 0)));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 20) {
      // skip static data length + dynamic lengths word
      uint256 _start = 52;
      uint256 _end;
      unchecked {
        _end = 52 + _encodedLengths.atIndex(0);
      }
      _table.name = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

      _start = _end;
      unchecked {
        _end += _encodedLengths.atIndex(1);
      }
      _table.description = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

      _start = _end;
      unchecked {
        _end += _encodedLengths.atIndex(2);
      }
      _table.caAddresses = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_address());
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    address creator,
    string memory name,
    string memory description,
    address[] memory caAddresses
  ) internal pure returns (bytes memory) {
    PackedCounter _encodedLengths;
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = PackedCounterLib.pack(bytes(name).length, bytes(description).length, caAddresses.length * 20);
    }

    return
      abi.encodePacked(
        creator,
        _encodedLengths.unwrap(),
        bytes((name)),
        bytes((description)),
        EncodeArray.encode((caAddresses))
      );
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(address worldAddress) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    return _keyTuple;
  }

  /* Delete all data for given keys */
  function deleteRecord(address worldAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    StoreSwitch.deleteRecord(_tableId, _keyTuple, getValueSchema());
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, address worldAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(worldAddress)));

    _store.deleteRecord(_tableId, _keyTuple, getValueSchema());
  }
}
