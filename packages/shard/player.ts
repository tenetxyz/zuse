/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.23.3
 * source: player.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace Shard {
    export class Coord3 extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            x?: number;
            y?: number;
            z?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("x" in data && data.x != undefined) {
                    this.x = data.x;
                }
                if ("y" in data && data.y != undefined) {
                    this.y = data.y;
                }
                if ("z" in data && data.z != undefined) {
                    this.z = data.z;
                }
            }
        }
        get x() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set x(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get y() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set y(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get z() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set z(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            x?: number;
            y?: number;
            z?: number;
        }): Coord3 {
            const message = new Coord3({});
            if (data.x != null) {
                message.x = data.x;
            }
            if (data.y != null) {
                message.y = data.y;
            }
            if (data.z != null) {
                message.z = data.z;
            }
            return message;
        }
        toObject() {
            const data: {
                x?: number;
                y?: number;
                z?: number;
            } = {};
            if (this.x != null) {
                data.x = this.x;
            }
            if (this.y != null) {
                data.y = this.y;
            }
            if (this.z != null) {
                data.z = this.z;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.x != 0)
                writer.writeFloat(1, this.x);
            if (this.y != 0)
                writer.writeFloat(2, this.y);
            if (this.z != 0)
                writer.writeFloat(3, this.z);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Coord3 {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Coord3();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.x = reader.readFloat();
                        break;
                    case 2:
                        message.y = reader.readFloat();
                        break;
                    case 3:
                        message.z = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Coord3 {
            return Coord3.deserialize(bytes);
        }
    }
    export class Quaternion extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            x?: number;
            y?: number;
            z?: number;
            w?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("x" in data && data.x != undefined) {
                    this.x = data.x;
                }
                if ("y" in data && data.y != undefined) {
                    this.y = data.y;
                }
                if ("z" in data && data.z != undefined) {
                    this.z = data.z;
                }
                if ("w" in data && data.w != undefined) {
                    this.w = data.w;
                }
            }
        }
        get x() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set x(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get y() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set y(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get z() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set z(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get w() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set w(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            x?: number;
            y?: number;
            z?: number;
            w?: number;
        }): Quaternion {
            const message = new Quaternion({});
            if (data.x != null) {
                message.x = data.x;
            }
            if (data.y != null) {
                message.y = data.y;
            }
            if (data.z != null) {
                message.z = data.z;
            }
            if (data.w != null) {
                message.w = data.w;
            }
            return message;
        }
        toObject() {
            const data: {
                x?: number;
                y?: number;
                z?: number;
                w?: number;
            } = {};
            if (this.x != null) {
                data.x = this.x;
            }
            if (this.y != null) {
                data.y = this.y;
            }
            if (this.z != null) {
                data.z = this.z;
            }
            if (this.w != null) {
                data.w = this.w;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.x != 0)
                writer.writeFloat(1, this.x);
            if (this.y != 0)
                writer.writeFloat(2, this.y);
            if (this.z != 0)
                writer.writeFloat(3, this.z);
            if (this.w != 0)
                writer.writeFloat(4, this.w);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Quaternion {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Quaternion();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.x = reader.readFloat();
                        break;
                    case 2:
                        message.y = reader.readFloat();
                        break;
                    case 3:
                        message.z = reader.readFloat();
                        break;
                    case 4:
                        message.w = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Quaternion {
            return Quaternion.deserialize(bytes);
        }
    }
    export class Player extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            position?: Coord3;
            direction?: Quaternion;
            health?: number;
            attack_cooldown_ticks_left?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("position" in data && data.position != undefined) {
                    this.position = data.position;
                }
                if ("direction" in data && data.direction != undefined) {
                    this.direction = data.direction;
                }
                if ("health" in data && data.health != undefined) {
                    this.health = data.health;
                }
                if ("attack_cooldown_ticks_left" in data && data.attack_cooldown_ticks_left != undefined) {
                    this.attack_cooldown_ticks_left = data.attack_cooldown_ticks_left;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get position() {
            return pb_1.Message.getWrapperField(this, Coord3, 2) as Coord3;
        }
        set position(value: Coord3) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_position() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get direction() {
            return pb_1.Message.getWrapperField(this, Quaternion, 3) as Quaternion;
        }
        set direction(value: Quaternion) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_direction() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get health() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set health(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get attack_cooldown_ticks_left() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set attack_cooldown_ticks_left(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            id?: string;
            position?: ReturnType<typeof Coord3.prototype.toObject>;
            direction?: ReturnType<typeof Quaternion.prototype.toObject>;
            health?: number;
            attack_cooldown_ticks_left?: number;
        }): Player {
            const message = new Player({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.position != null) {
                message.position = Coord3.fromObject(data.position);
            }
            if (data.direction != null) {
                message.direction = Quaternion.fromObject(data.direction);
            }
            if (data.health != null) {
                message.health = data.health;
            }
            if (data.attack_cooldown_ticks_left != null) {
                message.attack_cooldown_ticks_left = data.attack_cooldown_ticks_left;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                position?: ReturnType<typeof Coord3.prototype.toObject>;
                direction?: ReturnType<typeof Quaternion.prototype.toObject>;
                health?: number;
                attack_cooldown_ticks_left?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.position != null) {
                data.position = this.position.toObject();
            }
            if (this.direction != null) {
                data.direction = this.direction.toObject();
            }
            if (this.health != null) {
                data.health = this.health;
            }
            if (this.attack_cooldown_ticks_left != null) {
                data.attack_cooldown_ticks_left = this.attack_cooldown_ticks_left;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.has_position)
                writer.writeMessage(2, this.position, () => this.position.serialize(writer));
            if (this.has_direction)
                writer.writeMessage(3, this.direction, () => this.direction.serialize(writer));
            if (this.health != 0)
                writer.writeUint32(4, this.health);
            if (this.attack_cooldown_ticks_left != 0)
                writer.writeUint32(5, this.attack_cooldown_ticks_left);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Player {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Player();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.position, () => message.position = Coord3.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.direction, () => message.direction = Quaternion.deserialize(reader));
                        break;
                    case 4:
                        message.health = reader.readUint32();
                        break;
                    case 5:
                        message.attack_cooldown_ticks_left = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Player {
            return Player.deserialize(bytes);
        }
    }
    export class Attack extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            attacker_id?: string;
            victim_id?: string;
            damage?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("attacker_id" in data && data.attacker_id != undefined) {
                    this.attacker_id = data.attacker_id;
                }
                if ("victim_id" in data && data.victim_id != undefined) {
                    this.victim_id = data.victim_id;
                }
                if ("damage" in data && data.damage != undefined) {
                    this.damage = data.damage;
                }
            }
        }
        get attacker_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set attacker_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get victim_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set victim_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get damage() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set damage(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            attacker_id?: string;
            victim_id?: string;
            damage?: number;
        }): Attack {
            const message = new Attack({});
            if (data.attacker_id != null) {
                message.attacker_id = data.attacker_id;
            }
            if (data.victim_id != null) {
                message.victim_id = data.victim_id;
            }
            if (data.damage != null) {
                message.damage = data.damage;
            }
            return message;
        }
        toObject() {
            const data: {
                attacker_id?: string;
                victim_id?: string;
                damage?: number;
            } = {};
            if (this.attacker_id != null) {
                data.attacker_id = this.attacker_id;
            }
            if (this.victim_id != null) {
                data.victim_id = this.victim_id;
            }
            if (this.damage != null) {
                data.damage = this.damage;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.attacker_id.length)
                writer.writeString(1, this.attacker_id);
            if (this.victim_id.length)
                writer.writeString(2, this.victim_id);
            if (this.damage != 0)
                writer.writeUint32(3, this.damage);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Attack {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Attack();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.attacker_id = reader.readString();
                        break;
                    case 2:
                        message.victim_id = reader.readString();
                        break;
                    case 3:
                        message.damage = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Attack {
            return Attack.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedPlayerServiceService {
        static definition = {
            UpdatePlayer: {
                path: "/Shard.PlayerService/UpdatePlayer",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Player) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Player.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Player) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Player.deserialize(new Uint8Array(bytes))
            },
            AttackPlayer: {
                path: "/Shard.PlayerService/AttackPlayer",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Attack) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Attack.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Player) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Player.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract UpdatePlayer(call: grpc_1.ServerUnaryCall<Player, Player>, callback: grpc_1.sendUnaryData<Player>): void;
        abstract AttackPlayer(call: grpc_1.ServerUnaryCall<Attack, Player>, callback: grpc_1.sendUnaryData<Player>): void;
    }
    export class PlayerServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedPlayerServiceService.definition, "PlayerService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        UpdatePlayer: GrpcUnaryServiceInterface<Player, Player> = (message: Player, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Player>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Player>, callback?: grpc_1.requestCallback<Player>): grpc_1.ClientUnaryCall => {
            return super.UpdatePlayer(message, metadata, options, callback);
        };
        AttackPlayer: GrpcUnaryServiceInterface<Attack, Player> = (message: Attack, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Player>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Player>, callback?: grpc_1.requestCallback<Player>): grpc_1.ClientUnaryCall => {
            return super.AttackPlayer(message, metadata, options, callback);
        };
    }
}
