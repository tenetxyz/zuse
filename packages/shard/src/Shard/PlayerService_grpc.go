//Generated by gRPC Go plugin
//If you make any local changes, they will be lost
//source: player

package Shard

import (
	context "context"
	flatbuffers "github.com/google/flatbuffers/go"
	grpc "google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// Client API for PlayerService service
type PlayerServiceClient interface {
	UpdatePlayer(ctx context.Context, in *flatbuffers.Builder,
		opts ...grpc.CallOption) (*Player, error)
}

type playerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayerServiceClient(cc grpc.ClientConnInterface) PlayerServiceClient {
	return &playerServiceClient{cc}
}

func (c *playerServiceClient) UpdatePlayer(ctx context.Context, in *flatbuffers.Builder,
	opts ...grpc.CallOption) (*Player, error) {
	out := new(Player)
	err := c.cc.Invoke(ctx, "/Shard.PlayerService/UpdatePlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PlayerService service
type PlayerServiceServer interface {
	UpdatePlayer(context.Context, *Player) (*flatbuffers.Builder, error)
	mustEmbedUnimplementedPlayerServiceServer()
}

type UnimplementedPlayerServiceServer struct {
}

func (UnimplementedPlayerServiceServer) UpdatePlayer(context.Context, *Player) (*flatbuffers.Builder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlayer not implemented")
}

func (UnimplementedPlayerServiceServer) mustEmbedUnimplementedPlayerServiceServer() {}

type UnsafePlayerServiceServer interface {
	mustEmbedUnimplementedPlayerServiceServer()
}

func RegisterPlayerServiceServer(s grpc.ServiceRegistrar, srv PlayerServiceServer) {
	s.RegisterService(&_PlayerService_serviceDesc, srv)
}

func _PlayerService_UpdatePlayer_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).UpdatePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Shard.PlayerService/UpdatePlayer",
	}

	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).UpdatePlayer(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}
var _PlayerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Shard.PlayerService",
	HandlerType: (*PlayerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdatePlayer",
			Handler:    _PlayerService_UpdatePlayer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
	},
}
